{
  "openapi": "3.0.0",
  "info": {
    "title": "Read-it API",
    "version": "1.0.3",
    "description": "API Documentation for all endpoints"
  },
  "components": {
    "schemas": {
      "FlairSettings": {
        "type": "object",
        "properties": {
          "modOnly": {
            "type": "boolean",
            "description": "Flair is only available for mods to select"
          },
          "allowUserEdits": {
            "type": "boolean",
            "description": "User will be able to edit flair text"
          },
          "flairType": {
            "type": "string",
            "enum": ["Text and emojis", "Text only", "Emojis only"]
          },
          "emojisLimit": {
            "type": "number",
            "description": "Limit to the number of emojis in the flair (1 - 10)"
          }
        }
      },
      "Flair": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of the flair"
          },
          "flairName": {
            "type": "string",
            "description": "Name of the flair"
          },
          "order": {
            "type": "number",
            "description": "Order of the flair among the rest"
          },
          "backgroundColor": {
            "type": "string",
            "description": "Background color of the flair"
          },
          "textColor": {
            "type": "string",
            "description": "Color of the flair name"
          }
        }
      },
      "Thing": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of a thing"
          },
          "type": {
            "type": "string",
            "enum": ["post", "comment"]
          }
        }
      },
      "Comment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Comment ID"
          },
          "text": {
            "type": "string",
            "description": "Comment content (raw markdown text)"
          },
          "parentId": {
            "type": "string",
            "description": "id of the thing being replied to (parent)"
          },
          "parentType": {
            "type": "string",
            "enum": ["post", "comment"]
          },
          "level": {
            "type": "number",
            "description": "Level of the comment (How deep is it in the comment tree)"
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Category id"
          },
          "name": {
            "type": "string",
            "description": "A category name"
          }
        }
      },
      "PostSubmission": {
        "type": "object",
        "required": ["kind", "subreddit", "title"],
        "properties": {
          "kind": {
            "type": "string",
            "enum": ["link", "text", "image", "video", "post"]
          },
          "subreddit": {
            "type": "string",
            "description": "Subreddit name"
          },
          "title": {
            "type": "string",
            "description": "Title of the submission"
          },
          "content": {
            "type": "string",
            "description": "Post content (text/url/image/video)"
          },
          "nsfw": {
            "type": "boolean",
            "description": "Not Safe for Work"
          },
          "spoiler": {
            "type": "boolean",
            "description": "Blur the content of the post"
          },
          "flairId": {
            "type": "string",
            "description": "Flair ID"
          },
          "sendReplies": {
            "type": "boolean",
            "description": "Allow post reply notifications"
          },
          "sharePostId": {
            "type": "string",
            "description": "id of a post (given in case of sharing a post)"
          },
          "scheduleDate": {
            "type": "string",
            "format": "date",
            "description": "Date for the post submitted at in case of scheduling it"
          },
          "scheduleTime": {
            "type": "string",
            "format": "time",
            "description": "Time required for the post to be submitted at in case of scheduling it"
          },
          "scheduleTimeZone": {
            "type": "string",
            "format": "time_zone",
            "description": "Time zone chosen when scheduling a post"
          }
        }
      },
      "PostDetails": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "enum": ["link", "text", "image", "video"]
          },
          "subreddit": {
            "type": "string",
            "description": "Subreddit name"
          },
          "content": {
            "type": "string",
            "description": "Post content (text/url/image/video)"
          },
          "nsfw": {
            "type": "boolean",
            "description": "Not Safe for Work"
          },
          "spoiler": {
            "type": "boolean",
            "description": "Blur the content of the post"
          },
          "title": {
            "type": "string",
            "description": "Title of the submission"
          },
          "flair": {
            "$ref": "#/components/schemas/Flair"
          },
          "comments": {
            "type": "number",
            "description": "Total number of comments on a post"
          },
          "votes": {
            "type": "number",
            "description": "Total number of votes on a post"
          },
          "postedAt": {
            "type": "string",
            "description": "The time in which this post was published"
          },
          "postedBy": {
            "type": "string",
            "description": "Name of the user associated with the post"
          }
        }
      },
      "Post": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "enum": ["link", "text", "image", "video"]
          },
          "id": {
            "type": "string",
            "description": "id of a post"
          },
          "subreddit": {
            "type": "string",
            "description": "Subreddit name"
          },
          "content": {
            "type": "string",
            "description": "Post content (text/url/image/video)"
          },
          "nsfw": {
            "type": "boolean",
            "description": "Not Safe for Work"
          },
          "spoiler": {
            "type": "boolean",
            "description": "Blur the content of the post"
          },
          "title": {
            "type": "string",
            "description": "Title of the submission"
          },
          "flair": {
            "$ref": "#/components/schemas/Flair"
          },
          "comments": {
            "type": "number",
            "description": "Total number of comments on a post"
          },
          "votes": {
            "type": "number",
            "description": "Total number of votes on a post"
          },
          "postedAt": {
            "type": "string",
            "description": "The time in which this post was published"
          },
          "postedBy": {
            "type": "string",
            "description": "Name of the user associated with the post"
          }
        }
      },
      "Notifications": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the notification (maximum:120)"
          },
          "content": {
            "type": "object",
            "description": "An object that has every detail that we want to send"
          },
          "includedSegments": {
            "type": "array",
            "description": "An array hat describes which devices we will send notification to",
            "items": {
              "type": "object"
            }
          },
          "contentAvailable": {
            "type": "boolean",
            "description": "true if this notification will be send if the device is off ,false if it won't"
          },
          "smallIcon": {
            "type": "string",
            "description": "the path of the icon of the notification"
          },
          "data": {
            "type": "object",
            "description": "the external data that you want to send with the notification"
          },
          "senderId": {
            "type": "string",
            "description": "Name of the sender of the notification"
          },
          "receiverId": {
            "type": "number",
            "description": "Name of the sender of the notification"
          },
          "isRead": {
            "type": "boolean",
            "description": "True if the notification is read , False if the message is not read"
          },
          "sentAt": {
            "type": "string",
            "description": "The time of sending the notification"
          },
          "nsfw": {
            "type": "boolean",
            "description": "not safe for work"
          },
          "isHidden": {
            "type": "boolean",
            "description": "true if the notification is hidden , false if notification is not hidden"
          }
        }
      },
      "UserOverview": {
        "type": "object",
        "properties": {
          "before": {
            "type": "string",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things."
          },
          "after": {
            "type": "string",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things."
          },
          "children": {
            "type": "array",
            "description": "List of [Things] to return",
            "items": {
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Id of the post or the post containing the comments"
                },
                "type": {
                  "type": "string",
                  "enum": ["fullPost", "summaryPost"],
                  "description": "The type of the show [full post with its comments (your post), summary of the post with its comments]"
                },
                "data": {
                  "properties": {
                    "subreddit": {
                      "type": "string",
                      "description": "Name of subreddit which contain the post or the comment"
                    },
                    "postedBy": {
                      "type": "string",
                      "description": "The username for the publisher of the post"
                    },
                    "title": {
                      "type": "string",
                      "description": "Title of the post"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of content of the post",
                      "enum": ["text", "video", "image", "link"]
                    },
                    "content": {
                      "type": "string",
                      "description": "Content of the post [text, path of the video, path of the image, link]"
                    },
                    "post": {
                      "type": "object",
                      "description": "Post data",
                      "properties": {
                        "votes": {
                          "type": "integer",
                          "description": "Total number of votes to that post"
                        },
                        "publishTime": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Publish time of the post"
                        },
                        "flair": {
                          "type": "object",
                          "properties": {
                            "flairId": {
                              "type": "string",
                              "description": "The id of the flair"
                            },
                            "flairText": {
                              "type": "string",
                              "description": "Flair text"
                            },
                            "backgroundColor": {
                              "type": "string",
                              "description": "Background color of the flair"
                            },
                            "textColor": {
                              "type": "string",
                              "description": "Color of the flair text"
                            }
                          }
                        },
                        "inYourSubreddit": {
                          "type": "boolean",
                          "description": "If true, then you can approve, remove, or spam that post"
                        },
                        "moderation": {
                          "type": "object",
                          "description": "Moderate the post if you are a moderator in that subreddit",
                          "properties": {
                            "approve": {
                              "type": "object",
                              "description": "Approve the post",
                              "properties": {
                                "approvedBy": {
                                  "type": "string",
                                  "description": "Username for the moderator who approved that post"
                                },
                                "approvedDate": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "Date when that post approved"
                                }
                              }
                            },
                            "remove": {
                              "type": "object",
                              "description": "Remove the post",
                              "properties": {
                                "removedBy": {
                                  "type": "string",
                                  "description": "Username for the moderator who removed that post"
                                },
                                "removedDate": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "Date when that post removed"
                                }
                              }
                            },
                            "spam": {
                              "type": "object",
                              "description": "Spam the post",
                              "properties": {
                                "spammedBy": {
                                  "type": "string",
                                  "description": "Username for the moderator who spamed that post"
                                },
                                "spammedDate": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "Date when that post spamed"
                                }
                              }
                            },
                            "lock": {
                              "type": "boolean",
                              "description": "If true, then comments are locked in this post"
                            }
                          }
                        },
                        "editTime": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Edit time of the post"
                        },
                        "nsfw": {
                          "type": "boolean",
                          "description": "If true, then this post is NSFW"
                        },
                        "spoiler": {
                          "type": "boolean",
                          "description": "If true, then this post was marked as spoiler"
                        },
                        "saved": {
                          "type": "boolean",
                          "description": "If true, then this post was saved before by the logged-in user"
                        },
                        "vote": {
                          "type": "integer",
                          "enum": [1, 0, -1],
                          "description": "Used to know if the user voted up [1] or down [-1] or didn't vote [0] to that post"
                        }
                      }
                    },
                    "comments": {
                      "type": "array",
                      "description": "The comments writen by this user",
                      "items": {
                        "properties": {
                          "commentId": {
                            "type": "string",
                            "description": "The id of the comment"
                          },
                          "commentedBy": {
                            "type": "string",
                            "description": "The username of the comment owner"
                          },
                          "commentBody": {
                            "type": "string",
                            "description": "The comment itself"
                          },
                          "points": {
                            "type": "integer",
                            "description": "The points to that comment [up votes - down votes]"
                          },
                          "publishTime": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Publish time for the comment"
                          },
                          "editTime": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Edit time for the comment"
                          },
                          "parent": {
                            "type": "string",
                            "description": "The id of the parent comment in the tree"
                          },
                          "level": {
                            "type": "integer",
                            "description": "The level of the comment [level of nesting]"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Threads": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "full name of the thread"
          }
        }
      },
      "bans": {
        "type": "object",
        "properties": {
          "banTitle": {
            "type": "string",
            "description": "The title of the ban question"
          },
          "banFullDescription": {
            "type": "string",
            "description": "he answer of the ban question to appear in wiki page"
          }
        }
      },
      "rules": {
        "type": "object",
        "properties": {
          "ruleTitle": {
            "type": "string",
            "description": "The title of the rule"
          },
          "ruleDescription": {
            "type": "string",
            "description": "The description of the rule"
          },
          "questions": {
            "type": "array",
            "description": "questions to appear in wiki page",
            "items": {
              "type": "string"
            }
          },
          "ruleFullDescription": {
            "type": "string",
            "description": "The full description of the rule o appear in wiki page"
          }
        }
      },
      "moderator": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The username of the moderator"
          },
          "nickname": {
            "type": "string",
            "description": "The nickname of the moderator"
          },
          "dateOfModeration": {
            "type": "string",
            "description": "he date of being a moderator"
          },
          "permissions": {
            "type": "array",
            "description": "array of permissions the moderator has",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "community": {
        "type": "object",
        "properties": {
          "nsfw": {
            "type": "boolean",
            "description": "not safe for work"
          },
          "type": {
            "type": "string",
            "description": "type of the community",
            "enum": ["private", "public", "restricted"]
          },
          "isFavorite": {
            "type": "boolean",
            "description": "true if the subreddit is marked as favorite , false if it's not favorite"
          },
          "title": {
            "type": "string",
            "description": "Name of the community"
          },
          "category": {
            "type": "string",
            "description": "Category of the community"
          },
          "members": {
            "type": "number",
            "description": "Number of members of the community"
          },
          "online": {
            "type": "number",
            "description": "Number of online members of the community"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the community"
          },
          "dateOfCreation": {
            "type": "string",
            "description": "Date of creating the community"
          },
          "flairs": {
            "type": "array",
            "description": "list of available flairs to filter by",
            "items": {
              "type": "string"
            }
          },
          "rules": {
            "type": "array",
            "description": "list of the rules of the subreddit",
            "items": {
              "$ref": "#/components/schemas/rules"
            }
          },
          "bans": {
            "type": "array",
            "description": "list of the ban questions of the subreddit",
            "items": {
              "$ref": "#/components/schemas/bans"
            }
          },
          "moderators": {
            "type": "array",
            "description": "list of the moderators of the subreddit",
            "items": {
              "$ref": "#/components/schemas/moderator"
            }
          },
          "isMember": {
            "type": "boolean",
            "description": "True if you are a member of the community , False if you are not a member of the community"
          },
          "banner": {
            "type": "string",
            "description": "Path of the banner of the community"
          },
          "picture": {
            "type": "string",
            "description": "Path of the picture of the community"
          },
          "communityTheme": {
            "type": "boolean",
            "description": "True if community theme is on , False if community theme is off"
          },
          "views": {
            "type": "number",
            "description": "number of views of he community to get the trending search"
          },
          "mainTopic": {
            "type": "object",
            "description": "The main topic of the subreddit with its subtopics",
            "properties": {
              "topicTitle": {
                "type": "string",
                "description": "The title of the topic"
              },
              "subtopics": {
                "type": "array",
                "description": "the array of subtopics of the community",
                "items": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "ListedPost": {
        "type": "object",
        "properties": {
          "after": {
            "type": "string",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things."
          },
          "before": {
            "type": "string",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things."
          },
          "children": {
            "type": "array",
            "description": "List of posts to return",
            "items": {
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Id of the post"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "subreddit": {
                      "type": "string",
                      "description": "Name of subreddit which contain the post"
                    },
                    "postedBy": {
                      "type": "string",
                      "description": "The username for the publisher of the post"
                    },
                    "title": {
                      "type": "string",
                      "description": "Title of the post"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of content of the post",
                      "enum": ["text", "video", "image", "link"]
                    },
                    "content": {
                      "type": "string",
                      "description": "Content of the post [text, path of the video, path of the image, link]"
                    },
                    "votes": {
                      "type": "integer",
                      "description": "Total number of votes to that post"
                    },
                    "numberOfComments": {
                      "type": "integer",
                      "description": "Total number of comments"
                    },
                    "flair": {
                      "type": "object",
                      "properties": {
                        "flairId": {
                          "type": "string",
                          "description": "The id of the flair"
                        },
                        "flairText": {
                          "type": "string",
                          "description": "Flair text"
                        },
                        "backgroundColor": {
                          "type": "string",
                          "description": "Background color of the flair"
                        },
                        "textColor": {
                          "type": "string",
                          "description": "Color of the flair text"
                        }
                      }
                    },
                    "editTime": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Edit time of the post (if exists)"
                    },
                    "publishTime": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Publish time of the post"
                    },
                    "inYourSubreddit": {
                      "type": "boolean",
                      "description": "If true, then you can approve, remove, or spam that post"
                    },
                    "moderation": {
                      "type": "object",
                      "description": "Moderate the post if you are a moderator in that subreddit",
                      "properties": {
                        "approve": {
                          "type": "object",
                          "description": "Approve the post",
                          "properties": {
                            "approvedBy": {
                              "type": "string",
                              "description": "Username for the moderator who approved that post"
                            },
                            "approvedDate": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Date when that post approved"
                            }
                          }
                        },
                        "remove": {
                          "type": "object",
                          "description": "Remove the post",
                          "properties": {
                            "removedBy": {
                              "type": "string",
                              "description": "Username for the moderator who removed that post"
                            },
                            "removedDate": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Date when that post removed"
                            }
                          }
                        },
                        "spam": {
                          "type": "object",
                          "description": "Spam the post",
                          "properties": {
                            "spammedBy": {
                              "type": "string",
                              "description": "Username for the moderator who spamed that post"
                            },
                            "spammedDate": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Date when that post spamed"
                            }
                          }
                        },
                        "lock": {
                          "type": "boolean",
                          "description": "If true, then comments are locked in this post"
                        }
                      }
                    },
                    "nsfw": {
                      "type": "boolean",
                      "description": "If true, then this post is NSFW"
                    },
                    "spoiler": {
                      "type": "boolean",
                      "description": "If true, then this post is marked as spoiler"
                    },
                    "saved": {
                      "type": "boolean",
                      "description": "If true, then this post was saved before by the logged-in user"
                    },
                    "vote": {
                      "type": "integer",
                      "enum": [1, 0, -1],
                      "description": "Used to know if the user voted up [1] or down [-1] or didn't vote [0] to that post"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "CommentTree": {
        "type": "object",
        "properties": {
          "after": {
            "type": "string",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things."
          },
          "before": {
            "type": "string",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things."
          },
          "children": {
            "type": "array",
            "description": "The comment tree for the post",
            "items": {
              "properties": {
                "commentId": {
                  "type": "string",
                  "description": "The id of the comment"
                },
                "commentedBy": {
                  "type": "string",
                  "description": "The author of the comment"
                },
                "editTime": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Edit time of the comment (if exists)"
                },
                "publishTime": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Publish time of the comment"
                },
                "commentBody": {
                  "type": "string",
                  "description": "The comment itself"
                },
                "votes": {
                  "type": "integer",
                  "description": "Total number of votes to that post"
                },
                "saved": {
                  "type": "boolean",
                  "description": "If true, then this comment was saved before by the logged-in user"
                },
                "followed": {
                  "type": "boolean",
                  "description": "If true, then this comment was followed before by the logged-in user"
                },
                "vote": {
                  "type": "integer",
                  "enum": [1, 0, -1],
                  "description": "Used to know if the user voted up [1] or down [-1] or didn't vote [0] to that post"
                },
                "parent": {
                  "type": "string",
                  "description": "The id of the parent comment in the tree"
                },
                "level": {
                  "type": "integer",
                  "description": "The level of the comment [level of nesting]"
                },
                "numberofChildren": {
                  "type": "integer",
                  "description": "Number of replies to that comment"
                },
                "children": {
                  "type": "array",
                  "description": "The replies to that comment (Will be same structure as the current comment)",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "Message": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The special full name for each message"
          },
          "type": {
            "type": "string",
            "description": "describes the type of message,we have three types",
            "enum": ["Messages", "Post Replies", "Username Mentions"]
          },
          "subredditName": {
            "type": "string",
            "description": "the name of subreddit that the mention or the reply happened in, it will be needed in the case of post replies and mentions"
          },
          "postTitle": {
            "type": "string",
            "description": "the title of the post that the mention or reply happened in, it will be needed in the case of post replies and mentions"
          },
          "text": {
            "type": "string",
            "description": "Message Content as text"
          },
          "senderUsername": {
            "type": "string",
            "description": "Username of the sender"
          },
          "receiverUsername": {
            "type": "string",
            "description": "Username of the receiver"
          },
          "sentAt": {
            "type": "string",
            "description": "Time of sending the message"
          },
          "subject": {
            "type": "string",
            "description": "Subject of the message"
          },
          "isReply": {
            "type": "boolean",
            "description": "True if the msg is a reply to another , False if the msg isn't a reply to another"
          },
          "isRead": {
            "type": "boolean",
            "description": "True if the msg was read before , False if the msg wasn't read before",
            "default": false
          },
          "spamsCount": {
            "type": "number",
            "description": "Number of the spams this comment took",
            "default": 0
          }
        }
      },
      "ListItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "this item's identifier."
          },
          "type": {
            "type": "string",
            "enum": ["Post", "Comment"],
            "description": "the type of this item whether it is a comment or a post."
          },
          "data": {
            "type": "object",
            "description": "A custom data structure used to hold valuable information.",
            "properties": {
              "subreddit": {
                "type": "string",
                "description": "Name of subreddit which contain the post"
              },
              "postedBy": {
                "type": "string",
                "description": "The username for the publisher of the post"
              },
              "commentedBy": {
                "type": "string",
                "description": "The username for the user made the comment (in case that item has a type comment)."
              },
              "title": {
                "type": "string",
                "description": "Title of the post"
              },
              "content": {
                "type": "string",
                "description": "Content of the post [text, video, image, link] (in case that item has a type post)."
              },
              "commentContent": {
                "type": "string",
                "description": "Content of the comment (in case that item has a type comment)."
              },
              "postUpVotes": {
                "type": "integer",
                "description": "Number of Up votes to that post (in case that item has a type post)."
              },
              "postDownVotes": {
                "type": "integer",
                "description": "Number of Down votes to that post (in case that item has a type post)."
              },
              "commentUpVotes": {
                "type": "integer",
                "description": "Number of Up votes to that comment (in case that item has a type comment)."
              },
              "commentDownVotes": {
                "type": "integer",
                "description": "Number of Down votes to that comment (in case that item has a type comment)."
              },
              "numberOfComments": {
                "type": "integer",
                "description": "Total number of comments (in case that item has a type post)."
              },
              "edited": {
                "type": "boolean",
                "description": "If true, then this post or comment is edited"
              },
              "editTime": {
                "type": "string",
                "format": "date-time",
                "description": "Edit time of the post or comment"
              },
              "publishTime": {
                "type": "string",
                "format": "date-time",
                "description": "Publish time of the post"
              },
              "commentPublishTime": {
                "type": "string",
                "format": "date-time",
                "description": "Publish time of the Comment (in case that item has a type comment)."
              },
              "saved": {
                "type": "boolean",
                "description": "If true, then this post or comment is saved before by that moderator."
              },
              "vote": {
                "type": "integer",
                "enum": [1, 0, -1],
                "description": "Used to know if that moderator voted up [1] or down [-1] or didn't vote [0] to that post or comment"
              }
            }
          }
        }
      },
      "ListingPost": {
        "type": "object",
        "properties": {
          "before": {
            "type": "string",
            "description": "The fullname of the listing that follows before this page. null if there is no previous page."
          },
          "after": {
            "type": "string",
            "description": "The fullname of the listing that follows after this page. null if there is no next page."
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListItem"
            }
          }
        }
      },
      "ListingUserItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "this item's identifier."
          },
          "data": {
            "type": "object",
            "description": "A custom data structure used to hold valuable information.",
            "properties": {
              "username": {
                "type": "string",
                "description": "Username of the banned user"
              },
              "userPhoto": {
                "type": "string",
                "description": "The link of the user profile picture"
              },
              "bannedAt": {
                "type": "string",
                "format": "date-time",
                "description": "The time at which the user is banned"
              },
              "banPeriod": {
                "type": "integer",
                "description": "The period that user will be banned in days if not permanent."
              },
              "modNote": {
                "type": "string",
                "description": "Note on that ban"
              },
              "noteInclude": {
                "type": "string",
                "description": "Note to include in ban message"
              },
              "reasonForBan": {
                "type": "string",
                "description": "The reason for banning that user.",
                "enum": [
                  "Spam",
                  "Personal and confidential information",
                  "Threatening, harassing, or inciting violence",
                  "Other"
                ]
              }
            }
          }
        }
      },
      "ListingUser": {
        "type": "object",
        "properties": {
          "before": {
            "type": "string",
            "description": "The fullname of the listing that follows before this page. null if there is no previous page."
          },
          "after": {
            "type": "string",
            "description": "The fullname of the listing that follows after this page. null if there is no next page."
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListingUserItem"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "paths": {
    "/signup": {
      "post": {
        "summary": "Create a new account to the user",
        "tags": ["Sign Up"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": ["username", "email", "password"],
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Email of the user"
                  },
                  "username": {
                    "type": "string",
                    "description": "Username"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The account has been successfully created",
            "headers": {
              "Authorization": {
                "description": "The jwt that will be used for authorization",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why the request was invalid",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/signup/{type}": {
      "post": {
        "summary": "Sign up with google or facebook",
        "tags": ["Sign Up"],
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "description": "Type of sign up",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["google", "facebook"]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": ["accessToken"],
                "properties": {
                  "accessToken": {
                    "type": "string",
                    "description": "Access token from the response of google or facebook"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The account has been successfully created",
            "headers": {
              "Authorization": {
                "description": "The jwt that will be used for authorization",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why the request was invalid",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/username-available": {
      "get": {
        "summary": "Check if the username is used before",
        "tags": ["Sign Up"],
        "parameters": [
          {
            "in": "query",
            "required": true,
            "name": "username",
            "description": "Username to check",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The username is available"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why the request was invalid",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Username is already taken"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/email-available": {
      "get": {
        "summary": "Check if the email is used before",
        "tags": ["Sign Up"],
        "parameters": [
          {
            "in": "query",
            "required": true,
            "name": "email",
            "description": "Email to check",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The email is available"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why the request was invalid",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Email is already taken"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/verify-email/{id}/{token}": {
      "post": {
        "summary": "Verify the email",
        "tags": ["Sign Up"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "User's id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "token",
            "description": "The token created by the server to verify the email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email verified successfully",
            "headers": {
              "Authorization": {
                "description": "The jwt that will be used for authorization",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why the request was invalid",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Invalid token"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/random-username": {
      "get": {
        "summary": "Get an available random username used to create a new account",
        "tags": ["Sign Up"],
        "responses": {
          "200": {
            "description": "The email is available",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "username": {
                      "type": "string",
                      "description": "Random username"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/login": {
      "post": {
        "summary": "Log in to the website",
        "tags": ["Login"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": ["username", "password"],
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Username"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User logged in successfully",
            "headers": {
              "Authorization": {
                "description": "The jwt that will be used for authorization",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why the request was invalid",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/login/{type}": {
      "post": {
        "summary": "Login with google or facebook",
        "tags": ["Login"],
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "description": "Type of sign up",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["google", "facebook"]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": ["accessToken"],
                "properties": {
                  "accessToken": {
                    "type": "string",
                    "description": "Access token from the response of google or facebook"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User logged in successfully",
            "headers": {
              "Authorization": {
                "description": "The jwt that will be used for authorization",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why the request was invalid",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/login/forget": {
      "post": {
        "summary": "Forget username or password",
        "tags": ["Login"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": ["type", "email"],
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Forget username or password",
                    "enum": ["username", "password"]
                  },
                  "username": {
                    "type": "string",
                    "description": "Username (only when type = password)"
                  },
                  "email": {
                    "type": "string",
                    "description": "Email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email has been sent"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why the request was invalid",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/reset-password/{id}/{token}": {
      "post": {
        "summary": "Reset the password",
        "tags": ["Login"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "User's id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "token",
            "description": "The token created by the server to reset the password",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": ["newPassword", "verifyPassword"],
                "properties": {
                  "newPassword": {
                    "type": "string",
                    "description": "New password"
                  },
                  "verifyPassword": {
                    "type": "string",
                    "description": "New password again to verify"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password updated successfully",
            "headers": {
              "Authorization": {
                "description": "The jwt that will be used for authorization",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why the request was invalid",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Invalid token"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/saved-categories": {
      "get": {
        "summary": "Get a list of all categories",
        "tags": ["Categories"],
        "responses": {
          "200": {
            "description": "Categories returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "categories": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Category"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to view saved categories"
          },
          "404": {
            "description": "Page not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/comment": {
      "post": {
        "summary": "Submit a new comment or reply to a message",
        "tags": ["Comments"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment published successfully"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to write a comment"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/subreddits/leaderboard": {
      "get": {
        "summary": "Return a listing of all the Communities",
        "tags": ["Subreddit"],
        "parameters": [
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items desired [Maximum = 100]",
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "string",
                      "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things."
                    },
                    "after": {
                      "type": "string",
                      "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things."
                    },
                    "children": {
                      "type": "array",
                      "description": "List of [Things] to return",
                      "items": {
                        "properties": {
                          "title": {
                            "type": "string",
                            "description": "Name of the community"
                          },
                          "members": {
                            "type": "number",
                            "description": "number of members of the community"
                          },
                          "description": {
                            "type": "string",
                            "description": "A brief description of the community"
                          },
                          "isMember": {
                            "type": "boolean",
                            "description": "True if you are a member of the community , False if you are not a member of the community"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized to view this info"
          },
          "404": {
            "description": "Page not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/subreddits/leaderboard/{categoryName}": {
      "get": {
        "summary": "Return a listing of communities of a specific category",
        "tags": ["Subreddit"],
        "parameters": [
          {
            "in": "path",
            "name": "categoryName",
            "schema": {
              "type": "string",
              "description": "the category of subreddits"
            }
          },
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items desired [Maximum = 100]",
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "string",
                      "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things."
                    },
                    "after": {
                      "type": "string",
                      "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things."
                    },
                    "children": {
                      "type": "array",
                      "description": "List of [Things] to return",
                      "items": {
                        "properties": {
                          "title": {
                            "type": "string",
                            "description": "Name of the community"
                          },
                          "members": {
                            "type": "number",
                            "description": "number of members of the community"
                          },
                          "description": {
                            "type": "string",
                            "description": "A brief description of the community"
                          },
                          "posts": {
                            "type": "array",
                            "description": "An array of posts of the community",
                            "items": {
                              "type": "string"
                            }
                          },
                          "isMember": {
                            "type": "boolean",
                            "description": "True if you are a member of the community , False if you are not a member of the community"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized to view this info"
          },
          "404": {
            "description": "Page not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/custom-random-category": {
      "get": {
        "summary": "Return a listing of random communities with random category",
        "tags": ["Subreddit"],
        "parameters": [
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items desired [Maximum = 100]",
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "string",
                      "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things."
                    },
                    "after": {
                      "type": "string",
                      "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things."
                    },
                    "children": {
                      "type": "array",
                      "description": "List of [Things] to return",
                      "items": {
                        "properties": {
                          "title": {
                            "type": "string",
                            "description": "Name of the community"
                          },
                          "members": {
                            "type": "number",
                            "description": "number of members of the community"
                          },
                          "description": {
                            "type": "string",
                            "description": "A brief description of the community"
                          },
                          "isMember": {
                            "type": "boolean",
                            "description": "True if you are a member of the community , False if you are not a member of the community"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized to view this info"
          },
          "404": {
            "description": "Page not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/trending-communities": {
      "get": {
        "summary": "Return a listing of the mostly viewed communities",
        "tags": ["Subreddit"],
        "parameters": [
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items desired [Maximum = 100]",
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "string",
                      "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things."
                    },
                    "after": {
                      "type": "string",
                      "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things."
                    },
                    "children": {
                      "type": "array",
                      "description": "List of [Things] to return",
                      "items": {
                        "properties": {
                          "title": {
                            "type": "string",
                            "description": "Name of the community"
                          },
                          "members": {
                            "type": "number",
                            "description": "number of members of the community"
                          },
                          "description": {
                            "type": "string",
                            "description": "A brief description of the community"
                          },
                          "views": {
                            "type": "number",
                            "description": "Number of views of the community"
                          },
                          "isMember": {
                            "type": "boolean",
                            "description": "True if you are a member of the community , False if you are not a member of the community"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized to view this info"
          },
          "404": {
            "description": "Page not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/random-category": {
      "get": {
        "summary": "Return two random categories to display",
        "tags": ["Subreddit"],
        "responses": {
          "200": {
            "description": "Returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "firstCategory": {
                      "type": "string",
                      "description": "the name of the first category"
                    },
                    "secondCategory": {
                      "type": "string",
                      "description": "the name of the first category"
                    },
                    "before": {
                      "type": "string",
                      "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things."
                    },
                    "after": {
                      "type": "string",
                      "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things."
                    },
                    "firstCategoryChildren": {
                      "type": "array",
                      "description": "List of [Things] to return",
                      "items": {
                        "properties": {
                          "title": {
                            "type": "string",
                            "description": "Name of the community"
                          },
                          "members": {
                            "type": "number",
                            "description": "number of members of the community"
                          },
                          "description": {
                            "type": "string",
                            "description": "A brief description of the community"
                          },
                          "isMember": {
                            "type": "boolean",
                            "description": "True if you are a member of the community , False if you are not a member of the community"
                          }
                        }
                      }
                    },
                    "secondCategoryChildren": {
                      "type": "array",
                      "description": "List of [Things] to return",
                      "items": {
                        "properties": {
                          "title": {
                            "type": "string",
                            "description": "Name of the community"
                          },
                          "members": {
                            "type": "number",
                            "description": "number of members of the community"
                          },
                          "description": {
                            "type": "string",
                            "description": "A brief description of the community"
                          },
                          "isMember": {
                            "type": "boolean",
                            "description": "True if you are a member of the community , False if you are not a member of the community"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized to view this info"
          },
          "404": {
            "description": "Page not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/r/{subreddit}": {
      "get": {
        "summary": "Return all the details of the subreddit",
        "tags": ["Subreddit"],
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "description": "the name of the subreddit",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "children": {
                      "$ref": "#/components/schemas/moderator"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized to view this info"
          },
          "404": {
            "description": "Page not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/r/{subreddit}/about/moderators": {
      "get": {
        "summary": "Return a listing of moderators in that specified subreddit",
        "tags": ["Subreddit"],
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "description": "the name of the subreddit",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items desired [Maximum = 100]",
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "string",
                      "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things."
                    },
                    "after": {
                      "type": "string",
                      "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things."
                    },
                    "children": {
                      "type": "array",
                      "description": "List of [Things] to return",
                      "items": {
                        "$ref": "#/components/schemas/community"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized to view this info"
          },
          "404": {
            "description": "Page not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/r/{subreddit}/wiki/rules": {
      "get": {
        "summary": "Return all the rules of the subreddit in details (canceled feature)",
        "tags": ["Subreddit"],
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "description": "the name of the subreddit",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "children": {
                      "type": "array",
                      "description": "List of [Things] to return",
                      "items": {
                        "$ref": "#/components/schemas/rules"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized to view this info"
          },
          "404": {
            "description": "Page not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/r/{subreddit}/wiki/bans": {
      "get": {
        "summary": "Return all the ban questions of the subbreddit in details (canceled feature)",
        "tags": ["Subreddit"],
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "description": "the name of the subreddit",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "children": {
                      "type": "array",
                      "description": "List of [Things] to return",
                      "items": {
                        "$ref": "#/components/schemas/bans"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized to view this info"
          },
          "404": {
            "description": "Page not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/r/{subreddit}/add-main-topic": {
      "post": {
        "summary": "add the main topic to the community",
        "tags": ["Subreddit"],
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "description": "the name of the subreddit",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": ["title"],
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "title of the main topic in the community"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "main topic is submitted successfully"
          },
          "401": {
            "description": "Unauthorized add main topic"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/r/{subreddit}/add-subtopic": {
      "post": {
        "summary": "add subtopics of the community",
        "tags": ["Subreddit"],
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "description": "the name of the subreddit",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": ["title"],
                "properties": {
                  "title": {
                    "type": "array",
                    "description": "title of the main topic in the community",
                    "items": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "subtopics is submitted successfully"
          },
          "401": {
            "description": "Unauthorized add subtopic"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/r/{subreddit}/add-description": {
      "post": {
        "summary": "add description of the community",
        "tags": ["Subreddit"],
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "description": "the name of the subreddit",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": ["title"],
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "description of the community (maximum 500)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "description is submitted successfully"
          },
          "401": {
            "description": "Unauthorized add description"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/r/{subreddit}/toggle-favorite": {
      "patch": {
        "summary": "toggle favorite property of the community",
        "tags": ["Subreddit"],
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "description": "the name of the subreddit",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "toggling is done successfully"
          },
          "401": {
            "description": "Unauthorized to toggle favorite"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/r/{subreddit}/toggle-community-theme": {
      "patch": {
        "summary": "toggle community theme option of the community (canceled feature)",
        "tags": ["Subreddit"],
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "description": "the name of the subreddit",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "toggling is done successfully"
          },
          "401": {
            "description": "Unauthorized to toggle community theme"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/best": {
      "get": {
        "summary": "Return the best posts based on [time, votes, comments, number of shares]",
        "tags": ["Listing"],
        "parameters": [
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items desired [Maximum = 100]",
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListedPost"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/hot": {
      "get": {
        "summary": "Return the hot posts based on [time, votes, comments]",
        "tags": ["Listing"],
        "parameters": [
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items desired [Maximum = 100]",
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListedPost"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/r/{subreddit}/hot": {
      "get": {
        "summary": "Return the hot posts in a specific subreddit based on [time, votes, comments]",
        "tags": ["Listing"],
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "description": "The name of the subreddit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items desired [Maximum = 100]",
            "schema": {
              "type": "integer",
              "default": 25
            }
          },
          {
            "in": "query",
            "name": "flairId",
            "description": "Flair id to get all posts with that flair (optional)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListedPost"
                }
              }
            }
          },
          "404": {
            "description": "Didn't find a subreddit with that name"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/trending": {
      "get": {
        "summary": "Return the trending posts based on [views]",
        "tags": ["Listing"],
        "parameters": [
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items desired [Maximum = 100]",
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListedPost"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/r/{subreddit}/trending": {
      "get": {
        "summary": "Return the trending posts in a specific subreddit based on [views]",
        "tags": ["Listing"],
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "description": "The name of the subreddit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items desired [Maximum = 100]",
            "schema": {
              "type": "integer",
              "default": 25
            }
          },
          {
            "in": "query",
            "name": "flairId",
            "description": "Flair id to get all posts with that flair (optional)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListedPost"
                }
              }
            }
          },
          "404": {
            "description": "Didn't find a subreddit with that name"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/new": {
      "get": {
        "summary": "Return the new posts",
        "tags": ["Listing"],
        "parameters": [
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items desired [Maximum = 100]",
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListedPost"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/r/{subreddit}/new": {
      "get": {
        "summary": "Return the new posts in a specific subreddit",
        "tags": ["Listing"],
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "description": "The name of the subreddit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items desired [Maximum = 100]",
            "schema": {
              "type": "integer",
              "default": 25
            }
          },
          {
            "in": "query",
            "name": "flairId",
            "description": "Flair id to get all posts with that flair (optional)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListedPost"
                }
              }
            }
          },
          "404": {
            "description": "Didn't find a subreddit with that name"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/random": {
      "get": {
        "summary": "Return the id of a random post. [can be used to get the post and the comment tree later]",
        "tags": ["Listing"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "postId": {
                      "type": "string",
                      "description": "Post id that can be used to request for the post and its comments"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/r/{subreddit}/random": {
      "get": {
        "summary": "Return the id of a random post from a specific subreddit. [can be used to get the post and the comment tree later]",
        "tags": ["Listing"],
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "description": "The name of the subreddit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "postId": {
                      "type": "string",
                      "description": "Post id that can be used to request for the post and its comments"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Didn't find a subreddit with that name"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/top": {
      "get": {
        "summary": "Return the top posts based on [votes]",
        "tags": ["Listing"],
        "parameters": [
          {
            "in": "query",
            "name": "time",
            "description": "The time interval for the results",
            "schema": {
              "type": "string",
              "default": "all",
              "enum": ["hour", "day", "week", "month", "year", "all"]
            }
          },
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items desired [Maximum = 100]",
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListedPost"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/r/{subreddit}/top": {
      "get": {
        "summary": "Return the top posts in a specific subreddit based on [votes]",
        "tags": ["Listing"],
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "description": "The name of the subreddit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "time",
            "description": "The time interval for the results",
            "schema": {
              "type": "string",
              "default": "all",
              "enum": ["hour", "day", "week", "month", "year", "all"]
            }
          },
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items desired [Maximum = 100]",
            "schema": {
              "type": "integer",
              "default": 25
            }
          },
          {
            "in": "query",
            "name": "flairId",
            "description": "Flair id to get all posts with that flair (optional)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListedPost"
                }
              }
            }
          },
          "404": {
            "description": "Didn't find a subreddit with that name"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/r/{subreddit}/comments/{postId}": {
      "get": {
        "summary": "Get the comment tree for a given post",
        "tags": ["Comments"],
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "description": "The name of the subreddit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "postId",
            "description": "The post id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of comments to return (optional)",
            "schema": {
              "type": "integer",
              "default": 25
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comments sorting algorithm",
            "schema": {
              "type": "string",
              "default": "best",
              "enum": ["best", "top", "new", "old"]
            }
          },
          {
            "in": "query",
            "name": "depth",
            "description": "Maximum depth of subtrees of comments [how many levels of replies to a comment] (optional)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "comment",
            "description": "Id of a comment in the comment tree to be the highlighted (optional)",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentTree"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why the request was invalid",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/r/{subreddit}/comments/{postId}/{commentId}": {
      "get": {
        "summary": "Return comment tree of a specific comment",
        "tags": ["Comments"],
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "description": "The name of the subreddit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "postId",
            "description": "The post id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "The comment id to show its tree",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of comments to return (optional)",
            "schema": {
              "type": "integer",
              "default": 25
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comments sorting algorithm",
            "schema": {
              "type": "string",
              "default": "best",
              "enum": ["best", "top", "new", "old"]
            }
          },
          {
            "in": "query",
            "name": "depth",
            "description": "Maximum depth of subtrees of comments [how many levels of replies to a comment] (optional)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "highlightedCommentId",
            "description": "Id of a comment in the comment tree to be highlighted (optional)",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentTree"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why the request was invalid",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/r/{subreddit}/comments/{postId}/{commentId}/parent_comments": {
      "get": {
        "summary": "Return the parents of a specific comment",
        "tags": ["Comments"],
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "description": "The name of the subreddit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "postId",
            "description": "The post id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "The comment id to show its tree",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comments sorting algorithm",
            "schema": {
              "type": "string",
              "default": "best",
              "enum": ["best", "top", "new", "old"]
            }
          },
          {
            "in": "query",
            "name": "depth",
            "description": "Maximum depth of subtrees of comments [how many levels of replies to a comment] (optional)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "highlightedCommentId",
            "description": "Id of a comment in the comment tree to be the highlighted (optional)",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "parents": {
                      "type": "array",
                      "description": "All the parents for that specific comment",
                      "items": {
                        "properties": {
                          "commentId": {
                            "type": "string",
                            "description": "The id of the comment"
                          },
                          "commentedBy": {
                            "type": "string",
                            "description": "The author of the comment"
                          },
                          "editTime": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Edit time of the comment (if exists)"
                          },
                          "publishTime": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Publish time of the comment"
                          },
                          "commentBody": {
                            "type": "string",
                            "description": "The comment itself"
                          },
                          "votes": {
                            "type": "integer",
                            "description": "Total number of votes to that post"
                          },
                          "saved": {
                            "type": "boolean",
                            "description": "If true, then this comment was saved before by the logged-in user"
                          },
                          "followed": {
                            "type": "boolean",
                            "description": "If true, then this comment was followed before by the logged-in user"
                          },
                          "vote": {
                            "type": "integer",
                            "enum": [1, 0, -1],
                            "description": "Used to know if the user voted up [1] or down [-1] or didn't vote [0] to that post"
                          },
                          "parent": {
                            "type": "string",
                            "description": "The id of the parent comment in the tree"
                          },
                          "level": {
                            "type": "integer",
                            "description": "The level of the comment [level of nesting]"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why the request was invalid",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/message/compose": {
      "post": {
        "summary": "Send a message to a specific user with its subject",
        "tags": ["Messages"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "text",
                  "subject",
                  "senderUsername",
                  "receiverUsername"
                ],
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "Message Content as text"
                  },
                  "senderUsername": {
                    "type": "string",
                    "description": "Username of the sender"
                  },
                  "receiverUsername": {
                    "type": "string",
                    "description": "Username of the receiver"
                  },
                  "sendAt": {
                    "type": "string",
                    "description": "Time of sending the message"
                  },
                  "subject": {
                    "type": "string",
                    "description": "Subject of the message"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Your message is delivered successfully"
          },
          "401": {
            "description": "Unauthorized to send a message"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/message/sent": {
      "get": {
        "summary": "Return a listing of messages that you sent sorted by time of sending the msg",
        "tags": ["Messages"],
        "parameters": [
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items desired [Maximum = 100]",
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "string",
                      "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things."
                    },
                    "after": {
                      "type": "string",
                      "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things."
                    },
                    "children": {
                      "type": "array",
                      "description": "List of [Things] to return",
                      "items": {
                        "properties": {
                          "text": {
                            "type": "string",
                            "description": "Message Content as text"
                          },
                          "receiverUsername": {
                            "type": "string",
                            "description": "Username of the receiver"
                          },
                          "sendAt": {
                            "type": "string",
                            "description": "Time of sending the message"
                          },
                          "subject": {
                            "type": "string",
                            "description": "Subject of the message"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized to view this info"
          },
          "404": {
            "description": "Page not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/message/inbox": {
      "get": {
        "summary": "Return a listing of all the messages,postreplies and mentions that you received sorted by time of sending them",
        "tags": ["Messages"],
        "parameters": [
          {
            "in": "query",
            "name": "before",
            "description": "The id of last item in the listing that follows before this page. null if there is no previous page Only one of after/before will be specified.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "The id of last item in the listing that follows after this page. null if there is no next page Only one of after/before will be specified.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items desired [Maximum = 100]",
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "string",
                      "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things."
                    },
                    "after": {
                      "type": "string",
                      "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things."
                    },
                    "children": {
                      "type": "array",
                      "description": "List of [Things] to return",
                      "items": {
                        "properties": {
                          "text": {
                            "type": "string",
                            "description": "Message Content as text"
                          },
                          "type": {
                            "type": "string",
                            "description": "describes the type of message"
                          },
                          "subredditName": {
                            "type": "string",
                            "description": "subreddit name that the reply or the mention was in"
                          },
                          "postTitle": {
                            "type": "string",
                            "description": "the title of the post that the reply or the mention happened in"
                          },
                          "senderUsername": {
                            "type": "string",
                            "description": "Username of the sender"
                          },
                          "receiverUsername": {
                            "type": "string",
                            "description": "Username of the receiver"
                          },
                          "sendAt": {
                            "type": "string",
                            "description": "Time of sending the message"
                          },
                          "subject": {
                            "type": "string",
                            "description": "Subject of the message"
                          },
                          "isReply": {
                            "type": "boolean",
                            "description": "True if the msg is a reply to another , False if the msg isn't a reply to another"
                          },
                          "isRead": {
                            "type": "boolean",
                            "description": "True if the msg was read before , False if the msg wasn't read before",
                            "default": false
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized to view this info"
          },
          "404": {
            "description": "Page not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/message/unread": {
      "get": {
        "summary": "Return a listing of unread messages that you received sorted by time of sending the msg",
        "tags": ["Messages"],
        "parameters": [
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items desired [Maximum = 100]",
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "string",
                      "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things."
                    },
                    "after": {
                      "type": "string",
                      "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things."
                    },
                    "children": {
                      "type": "array",
                      "description": "List of [Things] to return",
                      "items": {
                        "properties": {
                          "text": {
                            "type": "string",
                            "description": "Message Content as text"
                          },
                          "senderUsername": {
                            "type": "string",
                            "description": "Username of the sender"
                          },
                          "sendAt": {
                            "type": "string",
                            "description": "Time of sending the message"
                          },
                          "subject": {
                            "type": "string",
                            "description": "Subject of the message"
                          },
                          "isReply": {
                            "type": "boolean",
                            "description": "True if the msg is a reply to another , False if the msg isn't a reply to another"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized to view this info"
          },
          "404": {
            "description": "Page not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/message/post-reply": {
      "get": {
        "summary": "Return a listing of post replies that you made sorted by time of adding the reply",
        "tags": ["Messages"],
        "parameters": [
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items desired [Maximum = 100]",
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "string",
                      "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things."
                    },
                    "after": {
                      "type": "string",
                      "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things."
                    },
                    "children": {
                      "type": "array",
                      "description": "List of [Things] to return",
                      "items": {
                        "properties": {
                          "text": {
                            "type": "string",
                            "description": "Message Content as text"
                          },
                          "type": {
                            "type": "string",
                            "description": "describes the type of message"
                          },
                          "subredditName": {
                            "type": "string",
                            "description": "subreddit name that the reply was in"
                          },
                          "postTitle": {
                            "type": "string",
                            "description": "the title of the post that the reply happened in"
                          },
                          "senderUsername": {
                            "type": "string",
                            "description": "Username of the sender"
                          },
                          "receiverUsername": {
                            "type": "string",
                            "description": "Username of the receiver"
                          },
                          "sendAt": {
                            "type": "string",
                            "description": "Time of sending the message"
                          },
                          "subject": {
                            "type": "string",
                            "description": "Subject of the message"
                          },
                          "isReply": {
                            "type": "boolean",
                            "description": "True if the msg is a reply to another , False if the msg isn't a reply to another"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized to view this info"
          },
          "404": {
            "description": "Page not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/message/mentions": {
      "get": {
        "summary": "Return a listing of mentions that you made sorted by time of adding the mention",
        "tags": ["Messages"],
        "parameters": [
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items desired [Maximum = 100]",
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "string",
                      "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things."
                    },
                    "after": {
                      "type": "string",
                      "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things."
                    },
                    "children": {
                      "type": "array",
                      "description": "List of [Things] to return",
                      "items": {
                        "properties": {
                          "text": {
                            "type": "string",
                            "description": "Message Content as text"
                          },
                          "type": {
                            "type": "string",
                            "description": "describes the type of message"
                          },
                          "subredditName": {
                            "type": "string",
                            "description": "subreddit name that the mention was in"
                          },
                          "postTitle": {
                            "type": "string",
                            "description": "the title of the post that the reply happened in"
                          },
                          "senderUsername": {
                            "type": "string",
                            "description": "Username of the sender"
                          },
                          "receiverUsername": {
                            "type": "string",
                            "description": "Username of the receiver"
                          },
                          "sendAt": {
                            "type": "string",
                            "description": "Time of sending the message"
                          },
                          "subject": {
                            "type": "string",
                            "description": "Subject of the message"
                          },
                          "isReply": {
                            "type": "boolean",
                            "description": "True if the msg is a reply to another , False if the msg isn't a reply to another"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized to view this info"
          },
          "404": {
            "description": "Page not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/message/messages": {
      "get": {
        "summary": "Return a listing of all messages that was sent or received sorted by the time",
        "tags": ["Messages"],
        "parameters": [
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items desired [Maximum = 100]",
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "string",
                      "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things."
                    },
                    "after": {
                      "type": "string",
                      "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things."
                    },
                    "children": {
                      "type": "array",
                      "description": "List of [Things] to return",
                      "items": {
                        "properties": {
                          "text": {
                            "type": "string",
                            "description": "Message Content as text"
                          },
                          "senderUsername": {
                            "type": "string",
                            "description": "Username of the sender"
                          },
                          "receiverUsername": {
                            "type": "string",
                            "description": "Username of the receiver"
                          },
                          "sendAt": {
                            "type": "string",
                            "description": "Time of sending the message"
                          },
                          "subject": {
                            "type": "string",
                            "description": "Subject of the message"
                          },
                          "isReply": {
                            "type": "boolean",
                            "description": "True if the msg is a reply to another , False if the msg isn't a reply to another"
                          },
                          "isRead": {
                            "type": "boolean",
                            "description": "True if the msg was read before , False if the msg wasn't read before",
                            "default": false
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized to view this info"
          },
          "404": {
            "description": "Page not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/unread-message": {
      "patch": {
        "summary": "Unread a Message",
        "tags": ["Messages"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["id"],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Full name of the message you want to unread it"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message has been unread successfully"
          },
          "401": {
            "description": "Unauthorized to unread this message"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/read-all-msgs": {
      "patch": {
        "summary": "mark all messages as read",
        "tags": ["Messages"],
        "responses": {
          "200": {
            "description": "All Message has been read successfully"
          },
          "401": {
            "description": "Unauthorized to read all the messages"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/r/{subreddit}/about/spam": {
      "get": {
        "summary": "Return a listing of required items relevant to moderators with things that have been marked as spam in that subreddit. (This endpoint is a listing)",
        "tags": ["Subreddit moderation"],
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "description": "name of the subreddit.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "the maximum number of items desired (default 25, maximum 100)",
            "schema": {
              "type": "integer",
              "maximum": 100,
              "default": 25
            },
            "required": false
          },
          {
            "in": "query",
            "name": "only",
            "description": "type of things to be returned",
            "schema": {
              "type": "string",
              "enum": ["posts", "comments"]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "sort",
            "description": "method of sorting the returned things",
            "schema": {
              "type": "string",
              "enum": ["newestfirst", "oldestfirst"],
              "default": "newestfirst"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "show",
            "description": "optional parameter; if all is passed, filters such as \"hide links that I have voted on\" will be disabled.",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Listing of required items relevant to moderators.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingPost"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/r/{subreddit}/about/edited": {
      "get": {
        "summary": "Return a listing of required items relevant to moderators with things that have been edited recently in that subreddit. (This endpoint is a listing)",
        "tags": ["Subreddit moderation"],
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "description": "name of the subreddit.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "the maximum number of items desired (default 25, maximum 100)",
            "schema": {
              "type": "integer",
              "maximum": 100,
              "default": 25
            },
            "required": false
          },
          {
            "in": "query",
            "name": "only",
            "description": "type of things to be returned",
            "schema": {
              "type": "string",
              "enum": ["posts", "comments"]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "sort",
            "description": "method of sorting the returned things",
            "schema": {
              "type": "string",
              "enum": ["newestfirst", "oldestfirst"],
              "default": "newestfirst"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "show",
            "description": "optional parameter; if all is passed, filters such as \"hide links that I have voted on\" will be disabled.",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Listing of required items relevant to moderators.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingPost"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/r/{subreddit}/about/unmoderated": {
      "get": {
        "summary": "Return a listing of required items relevant to moderators with things that have yet to be approved/removed by a mod in that subreddit. (This endpoint is a listing)",
        "tags": ["Subreddit moderation"],
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "description": "name of the subreddit.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "the maximum number of items desired (default 25, maximum 100)",
            "schema": {
              "type": "integer",
              "maximum": 100,
              "default": 25
            },
            "required": false
          },
          {
            "in": "query",
            "name": "sort",
            "description": "method of sorting the returned things",
            "schema": {
              "type": "string",
              "enum": ["newestfirst", "oldestfirst"],
              "default": "newestfirst"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "show",
            "description": "optional parameter; if all is passed, filters such as \"hide links that I have voted on\" will be disabled.",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Listing of required items relevant to moderators.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingPost"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/r/{subreddit}/accept-moderator-invite": {
      "post": {
        "summary": "Accept an invite to moderate the specified subreddit. The authenticated user must have been invited to moderate the subreddit by one of its current moderators or the admin.",
        "tags": ["General moderation"],
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "description": "name of the subreddit.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/r/{subreddit}/moderator-invite": {
      "post": {
        "summary": "Send a moderation invite to a user.",
        "tags": ["General moderation"],
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "description": "name of the subreddit.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": ["accessTo"],
                "properties": {
                  "accessTo": {
                    "type": "string",
                    "description": "Give the moderator access to do what.",
                    "enum": [
                      "Every thing",
                      "Manage users",
                      "Manage settings",
                      "Manage flair",
                      "Manage posts and comments"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/leave-moderator": {
      "post": {
        "summary": "Abdicate moderator status in a subreddit.",
        "tags": ["General moderation"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": ["subreddit"],
                "properties": {
                  "subreddit": {
                    "type": "string",
                    "description": "name of the subreddit to leave it's moderation."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/approve": {
      "post": {
        "summary": "Approve a post or comment. for spam reports, approving means that this post / comment is not a spam.",
        "tags": ["Posts and comments moderation"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": ["id", "type"],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "id of a thing."
                  },
                  "type": {
                    "type": "string",
                    "description": "type of that thing (post, comment,..)."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/remove": {
      "post": {
        "summary": "Remove  a post or comment. for spam reports, removing means that this post / comment is a spam so it is removed.",
        "tags": ["Posts and comments moderation"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": ["id", "type"],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "id of a thing."
                  },
                  "type": {
                    "type": "string",
                    "description": "type of that thing (post, comment,..)."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/lock": {
      "post": {
        "summary": "Lock a post or comment. Prevents a post or new child comments from receiving new comments.",
        "tags": ["Posts and comments moderation"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": ["id", "type"],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "id of a thing."
                  },
                  "type": {
                    "type": "string",
                    "description": "type of that thing (post, comment,..)."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/unlock": {
      "post": {
        "summary": "Unlock a post or comment. Allow a post or comment to receive new comments.",
        "tags": ["Posts and comments moderation"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": ["id", "type"],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "id of a thing."
                  },
                  "type": {
                    "type": "string",
                    "description": "type of that thing (post, comment,..)."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/ban": {
      "post": {
        "summary": "Ban a user from a subreddit. Banned users can't post or comment on that subreddit.",
        "tags": ["Subreddit moderation"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": ["userId", "subreddit", "reasonForBan"],
                "properties": {
                  "userId": {
                    "type": "string",
                    "description": "id of the user to ban."
                  },
                  "subreddit": {
                    "type": "string",
                    "description": "The name of the subreddit."
                  },
                  "banPeriod": {
                    "type": "integer",
                    "description": "The period that user will be banned in days if not permanent. (default Permanent)"
                  },
                  "reasonForBan": {
                    "type": "string",
                    "enum": [
                      "Spam",
                      "Personal and confidential information",
                      "Threatening, harassing, or inciting violence",
                      "Other"
                    ],
                    "description": "The reason for banning that user."
                  },
                  "modNote": {
                    "type": "string",
                    "description": "Note on that ban"
                  },
                  "noteInclude": {
                    "type": "string",
                    "description": "Note to include in ban message"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/unban": {
      "post": {
        "summary": "Remove a ban from a user.",
        "tags": ["Subreddit moderation"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": ["userId", "subreddit"],
                "properties": {
                  "userId": {
                    "type": "string",
                    "description": "id of the user to remove the ban."
                  },
                  "subreddit": {
                    "type": "string",
                    "description": "The name of the subreddit."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/r/{subreddit}/about/banned": {
      "get": {
        "summary": "Return a listing relevant to moderators in that subreddit with banned users. (This endpoint is a listing)",
        "tags": ["Subreddit moderation"],
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "description": "name of the subreddit.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "the maximum number of items desired (default 25, maximum 100)",
            "schema": {
              "type": "integer",
              "maximum": 100,
              "default": 25
            },
            "required": false
          },
          {
            "in": "query",
            "name": "show",
            "description": "optional parameter; if all is passed, filters such as \"hide links that I have voted on\" will be disabled.",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Listing of required items relevant to moderators.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingUser"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/r/{subreddit}/about/edit": {
      "get": {
        "summary": "Get the current settings of a subreddit.",
        "tags": ["Subreddit moderation"],
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "description": "name of the subreddit.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The current settings of the subreddit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "communityName": {
                      "type": "string",
                      "description": "The name of the community."
                    },
                    "communityTopics": {
                      "type": "array",
                      "description": "The topics of the community.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "topicName": {
                            "type": "string",
                            "description": "Name of the topic"
                          }
                        }
                      }
                    },
                    "communityDescription": {
                      "type": "string",
                      "description": "The description of the community."
                    },
                    "sendWelcomeMessage": {
                      "type": "boolean",
                      "description": "If that community send a welcome message to the new members or not."
                    },
                    "welcomeMessage": {
                      "type": "string",
                      "description": "The welcome message of the community. (if sendWelcomeMessage is true)"
                    },
                    "language": {
                      "type": "string",
                      "description": "The janguage of the community."
                    },
                    "region": {
                      "type": "string",
                      "description": "The region of the community."
                    },
                    "type": {
                      "type": "string",
                      "description": "The type of the community.",
                      "enum": ["Public", "Restricted", "Private"]
                    },
                    "NSFW": {
                      "type": "boolean",
                      "description": "The community allow +18 content or not."
                    },
                    "acceptingRequestsToJoin": {
                      "type": "boolean",
                      "description": "Display a button on your private subreddit that allows users to request to join. (if the type is private only)"
                    },
                    "acceptingRequestsToPost": {
                      "type": "boolean",
                      "description": "Accept posts or not (if the type is restricted only)"
                    },
                    "approvedUsersHaveTheAbilityTo": {
                      "type": "string",
                      "description": "Approved users have the ability to (if the type is restricted only)",
                      "enum": ["Post only", "Comment only", "Post & Comment"]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "summary": "ٍSet the settings of a subreddit.",
        "tags": ["Subreddit moderation"],
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "description": "name of the subreddit.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "communityName",
                  "communityTopics",
                  "communityDescription",
                  "sendWelcomeMessage",
                  "welcomeMessage",
                  "approvedUsersHaveTheAbilityTo",
                  "acceptingRequestsToPost",
                  "acceptingRequestsToJoin",
                  "NSFW",
                  "type",
                  "region",
                  "language"
                ],
                "properties": {
                  "communityName": {
                    "type": "string",
                    "description": "The name of the community."
                  },
                  "communityTopics": {
                    "type": "array",
                    "description": "The topics of the community. (maximum 25 topic)",
                    "items": {
                      "type": "object",
                      "properties": {
                        "topicName": {
                          "type": "string",
                          "description": "Name of the topic"
                        }
                      }
                    }
                  },
                  "communityDescription": {
                    "type": "string",
                    "description": "The description of the community. (maximum 500 Characters)"
                  },
                  "sendWelcomeMessage": {
                    "type": "boolean",
                    "description": "If that community send a welcome message to the new members or not."
                  },
                  "welcomeMessage": {
                    "type": "string",
                    "description": "The welcome message of the community. (if sendWelcomeMessage is true) (maximum 5000 Characters)"
                  },
                  "language": {
                    "type": "string",
                    "description": "The janguage of the community."
                  },
                  "Region": {
                    "type": "string",
                    "description": "The region of the community."
                  },
                  "Type": {
                    "type": "string",
                    "description": "The type of the community.",
                    "enum": ["Public", "Restricted", "Private"]
                  },
                  "NSFW": {
                    "type": "boolean",
                    "description": "The community allow +18 content or not."
                  },
                  "acceptingRequestsToJoin": {
                    "type": "boolean",
                    "description": "Display a button on your private subreddit that allows users to request to join. (if the type is private only)"
                  },
                  "acceptingRequestsToPost": {
                    "type": "boolean",
                    "description": "Accept posts or not (if the type is restricted only)"
                  },
                  "approvedUsersHaveTheAbilityTo": {
                    "type": "string",
                    "description": "Approved users have the ability to (if the type is restricted only)",
                    "enum": ["Post only", "Comment only", "Post & Comment"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/r/{subreddit}/suggested-topics": {
      "get": {
        "summary": "Get the suggested topics for a subreddit.",
        "tags": ["Subreddit moderation"],
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "description": "name of the subreddit.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The suggested topics for the subreddit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "communityTopics": {
                      "type": "array",
                      "description": "The topics of the community. (maximum 25 topic)",
                      "items": {
                        "type": "object",
                        "properties": {
                          "topicName": {
                            "type": "string",
                            "description": "Name of the topic"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/r/{subreddit}/about/rules": {
      "post": {
        "summary": "Add a rule to subreddit.",
        "tags": ["Subreddit moderation"],
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "description": "name of the subreddit.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": ["ruleName", "appliesTo"],
                "properties": {
                  "ruleName": {
                    "type": "string",
                    "description": "The name of the rule."
                  },
                  "appliesTo": {
                    "type": "string",
                    "description": "Where to apply the rule",
                    "enum": [
                      "posts and comments",
                      "posts only",
                      "comments only"
                    ]
                  },
                  "reportReason": {
                    "type": "string",
                    "description": "The reason of the report. (maximum 100 charachter)"
                  },
                  "description": {
                    "type": "string",
                    "description": "The full description of the report. (maximum 500 charachter)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "get": {
        "summary": "Get the rules for a subreddit.",
        "tags": ["Subreddit moderation"],
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "description": "name of the subreddit.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The rules for the subreddit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "rules": {
                      "type": "array",
                      "description": "The rules of the subreddit. (maximum 15 rule)",
                      "items": {
                        "type": "object",
                        "properties": {
                          "ruleID": {
                            "type": "string",
                            "description": "ID of the rule"
                          },
                          "ruleName": {
                            "type": "string",
                            "description": "Name of the rule"
                          },
                          "ruleOrder": {
                            "type": "integer",
                            "description": "Order of the rule"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Creation date of the rule"
                          },
                          "appliesTo": {
                            "type": "string",
                            "description": "Where to apply the rule",
                            "enum": [
                              "posts and comments",
                              "posts only",
                              "comments only"
                            ]
                          },
                          "reportReason": {
                            "type": "string",
                            "description": "The reason of the report. (maximum 100 charachter)"
                          },
                          "description": {
                            "type": "string",
                            "description": "The full description of the report. (maximum 500 charachter)"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/r/{subreddit}/about/rules/{ruleId}": {
      "put": {
        "summary": "Edit a rule at subreddit.",
        "tags": ["Subreddit moderation"],
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "description": "name of the subreddit.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": ["ruleName", "appliesTo", "ruleOrder"],
                "properties": {
                  "ruleName": {
                    "type": "string",
                    "description": "The name of the rule."
                  },
                  "ruleOrder": {
                    "type": "integer",
                    "description": "Order of the rule"
                  },
                  "appliesTo": {
                    "type": "string",
                    "description": "Where to apply the rule",
                    "enum": [
                      "posts and comments",
                      "posts only",
                      "comments only"
                    ]
                  },
                  "reportReason": {
                    "type": "string",
                    "description": "The reason of the report. (maximum 100 charachter)"
                  },
                  "description": {
                    "type": "string",
                    "description": "The full description of the report. (maximum 500 charachter)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/r/{subreddit}/about/rules-order": {
      "post": {
        "summary": "Edit rules order of the subreddit.",
        "tags": ["Subreddit moderation"],
        "parameters": [
          {
            "in": "path",
            "name": "subreddit",
            "description": "name of the subreddit.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": ["rulesOrder"],
                "properties": {
                  "rulesOrder": {
                    "type": "array",
                    "description": "The order of the rules.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "ruleId": {
                          "type": "string",
                          "description": "id of the rule"
                        },
                        "ruleOrder": {
                          "type": "string",
                          "description": "The new order of the rule"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/r/{subreddit}/about/post-flairs": {
      "get": {
        "summary": "Returns all post flairs of a subreddit",
        "tags": ["Posts and comments moderation"],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "subreddit",
            "description": "Subreddit name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Post flairs returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "postFlairs": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "id of the flair"
                          },
                          "flairName": {
                            "type": "string",
                            "description": "Name of the flair"
                          },
                          "order": {
                            "type": "number",
                            "description": "Order of the flair among the rest"
                          },
                          "backgroundColor": {
                            "type": "string",
                            "description": "Background color of the flair"
                          },
                          "textColor": {
                            "type": "string",
                            "description": "Color of the flair name"
                          },
                          "settings": {
                            "$ref": "#/components/schemas/FlairSettings"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access"
          },
          "404": {
            "description": "Subreddit not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "summary": "Add a new post flair to a given subreddit",
        "tags": ["Posts and comments moderation"],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "subreddit",
            "description": "Subreddit name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "flairName": {
                    "type": "string",
                    "description": "Name of the flair"
                  },
                  "backgroundColor": {
                    "type": "string",
                    "description": "Background color of the flair"
                  },
                  "textColor": {
                    "type": "string",
                    "description": "Color of the flair name"
                  },
                  "settings": {
                    "$ref": "#/components/schemas/FlairSettings"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Post flair successfully added"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access"
          },
          "404": {
            "description": "Subreddit not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/r/{subreddit}/about/post-flairs/{flairId}": {
      "get": {
        "summary": "Returns details of a specific post flair",
        "tags": ["Posts and comments moderation"],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "subreddit",
            "description": "Subreddit name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "required": true,
            "name": "flairId",
            "description": "Post flair ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Post flair returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "flairName": {
                      "type": "string",
                      "description": "Name of the flair"
                    },
                    "backgroundColor": {
                      "type": "string",
                      "description": "Background color of the flair"
                    },
                    "order": {
                      "type": "number",
                      "description": "Order of the flair among the rest"
                    },
                    "textColor": {
                      "type": "string",
                      "description": "Color of the flair name"
                    },
                    "settings": {
                      "$ref": "#/components/schemas/FlairSettings"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access"
          },
          "404": {
            "description": "Subreddit not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "summary": "Edit an existing post flair in a given subreddit",
        "tags": ["Posts and comments moderation"],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "subreddit",
            "description": "Subreddit name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "required": true,
            "name": "flairId",
            "description": "id of a post flair",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "flairName": {
                    "type": "string",
                    "description": "Name of the flair"
                  },
                  "backgroundColor": {
                    "type": "string",
                    "description": "Background color of the flair"
                  },
                  "textColor": {
                    "type": "string",
                    "description": "Color of the flair name"
                  },
                  "settings": {
                    "$ref": "#/components/schemas/FlairSettings"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Post flair successfully edited"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access"
          },
          "404": {
            "description": "Subreddit not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete an existing post flair in a given subreddit",
        "tags": ["Posts and comments moderation"],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "subreddit",
            "description": "Subreddit name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "required": true,
            "name": "flairId",
            "description": "id of a post flair",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Post flair successfully deleted"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access"
          },
          "404": {
            "description": "Subreddit not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/r/{subreddit}/about/post-flairs-order": {
      "post": {
        "summary": "Edit the order of all post flairs in a given subreddit",
        "tags": ["Posts and comments moderation"],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "subreddit",
            "description": "Subreddit name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "flairsOrder": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "flairId": {
                          "type": "string",
                          "description": "id of the post flair"
                        },
                        "flairOrder": {
                          "type": "string",
                          "description": "The new order of the flair"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order edited successfully"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access"
          },
          "404": {
            "description": "Subreddit not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/r/{subreddit}/about/post-flairs-settings": {
      "get": {
        "summary": "Get settings for post flairs in a given subreddit",
        "tags": ["Posts and comments moderation"],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "subreddit",
            "description": "Subreddit name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Post flairs settings returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "enablePostFlairs": {
                      "type": "boolean",
                      "description": "Indicates whether this community enabled flairs on posts or not"
                    },
                    "allowUsers": {
                      "type": "boolean",
                      "description": "This will let users select, edit, and clear post flair for their posts in this community."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access"
          },
          "404": {
            "description": "Subreddit not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "summary": "Change the settings for post flairs in a community",
        "tags": ["Posts and comments moderation"],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "subreddit",
            "description": "Subreddit name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "enablePostFlairs": {
                    "type": "boolean",
                    "description": "Indicates whether this community enabled flairs on posts or not"
                  },
                  "allowUsers": {
                    "type": "boolean",
                    "description": "This will let users select, edit, and clear post flair for their posts in this community."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Post flairs settings changed successfully"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access"
          },
          "404": {
            "description": "Subreddit not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/notifications": {
      "get": {
        "summary": "get all the notifications sent to the user",
        "tags": ["Notifications"],
        "parameters": [
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items desired [Maximum = 100]",
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "string",
                      "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things."
                    },
                    "after": {
                      "type": "string",
                      "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things."
                    },
                    "children": {
                      "type": "array",
                      "description": "List of notifications",
                      "items": {
                        "properties": {
                          "title": {
                            "type": "string",
                            "description": "title of the notification"
                          },
                          "link": {
                            "type": "string",
                            "description": "link to the full item in the notification"
                          },
                          "sendAt": {
                            "type": "string",
                            "description": "time of sending the notification"
                          },
                          "content": {
                            "type": "string",
                            "description": "content of the notification"
                          },
                          "isRead": {
                            "type": "boolean",
                            "description": "true if notification is read false if it's not"
                          },
                          "smallIcon": {
                            "type": "string",
                            "description": "the path of the icon of the notification"
                          },
                          "senderID": {
                            "type": "string",
                            "description": "Name of the sender of the notification"
                          },
                          "data": {
                            "type": "object",
                            "description": "the external data that you want to send with the notification"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized to view this info"
          },
          "404": {
            "description": "notifications not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/mark-all-notifications-read": {
      "patch": {
        "summary": "mark all the notifications as read",
        "tags": ["Notifications"],
        "responses": {
          "200": {
            "description": "Notification is hidden successfully"
          },
          "401": {
            "description": "Unauthorized to hide the notifications"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/hide-noification": {
      "patch": {
        "summary": "mark a specific notification as hidden",
        "tags": ["Notifications"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "id of the notification you want to make hidden"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Notifications are set to read successfully"
          },
          "401": {
            "description": "Unauthorized to Read the notifications"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/live/thread": {
      "get": {
        "summary": "Get a list of updates posted in this thread. (canceled feature)",
        "tags": ["Threads"],
        "parameters": [
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items desired [Maximum = 100]",
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Threads"
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized to get this thread"
          },
          "404": {
            "description": "thread not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "patch": {
        "summary": "editing a thread (canceled feature)",
        "tags": ["Threads"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Full name of the thread that you want to edit"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "thread has just been edited"
          },
          "401": {
            "description": "Unauthorized to spam this thread"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "summary": "updating a thread (canceled feature)",
        "tags": ["Threads"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Full name of the thread"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Thread has ben updated successfully"
          },
          "401": {
            "description": "Unauthorized to update this thread"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "closes a thread (canceled feature)",
        "tags": ["Threads"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Full name of the thread that you want to close"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "thread has just been closed successfully"
          },
          "401": {
            "description": "Unauthorized to close this thread"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/live/by-id/names": {
      "get": {
        "summary": "Get a list all the live events (canceled feature)",
        "tags": ["Threads"],
        "responses": {
          "200": {
            "description": "Returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Threads"
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized to get this thread"
          },
          "404": {
            "description": "thread not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/live/create": {
      "post": {
        "summary": "Create a new live thread. Once created, the initial settings can be modified with /live/thread/edit and new updates can be posted with /live/thread/update. (canceled feature)",
        "tags": ["Threads"],
        "responses": {
          "200": {
            "description": "Returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Threads"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created successfully"
          },
          "401": {
            "description": "Unauthorized to create this thread"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/live/thread/about": {
      "get": {
        "summary": "get a some basic info about the live thread (canceled feature)",
        "tags": ["Threads"],
        "responses": {
          "200": {
            "description": "Returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Threads"
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized to get the threads"
          },
          "404": {
            "description": "threads not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/delete": {
      "delete": {
        "summary": "Delete a Post, Comment or Message",
        "tags": ["Post-comment-message actions"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "id of a thing created by the user"
                  },
                  "type": {
                    "type": "string",
                    "enum": ["post", "comment", "message"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successfully deleted"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to delete this thing"
          },
          "404": {
            "description": "Item already deleted (Not Found)"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/mark-spam": {
      "post": {
        "summary": "Mark a post, comment or message as spam",
        "tags": ["Post-comment-message actions"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "id of a thing created by the user"
                  },
                  "type": {
                    "type": "string",
                    "enum": ["post", "comment", "message"]
                  },
                  "reason": {
                    "type": "string",
                    "description": "Reason for why the user marked this thing as spam"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Marked as spam successfully"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to mark this thing as spam"
          },
          "404": {
            "description": "Thing not found"
          },
          "409": {
            "description": "Already marked as spam"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/unmark-spam": {
      "post": {
        "summary": "Unmark a post as spam",
        "tags": ["Post-comment-message actions"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "id of a thing created by the user"
                  },
                  "type": {
                    "type": "string",
                    "enum": ["post", "comment", "message"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Unmarked as spam successfully"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to unmark this thing as spam"
          },
          "404": {
            "description": "Thing not found"
          },
          "409": {
            "description": "Already unmarked as spam"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/edit-user-text": {
      "put": {
        "summary": "Edit the body text of a comment or post",
        "tags": ["Post-comment actions"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "New text entered"
                  },
                  "id": {
                    "type": "string",
                    "description": "id of the thing being edited"
                  },
                  "type": {
                    "type": "string",
                    "enum": ["post", "comment"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Post/Comment edited successfully"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to edit this post/comment"
          },
          "404": {
            "description": "Content requested for editing is unavailable"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/save": {
      "post": {
        "summary": "Save a post or comment",
        "tags": ["Post-comment actions"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "id of a thing"
                  },
                  "type": {
                    "type": "string",
                    "enum": ["post", "comment"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Post/Comment Saved successfully"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Can't save this thing"
          },
          "404": {
            "description": "Post/Comment not found"
          },
          "409": {
            "description": "Post/Comment already saved"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/send-replies": {
      "post": {
        "summary": "Enable or disable inbox replies for a Post or comment",
        "tags": ["Post-comment actions"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "id of a thing created by the user"
                  },
                  "type": {
                    "type": "string",
                    "enum": ["post", "comment"]
                  },
                  "state": {
                    "type": "boolean",
                    "description": "True for enabling replies and false for disabling it"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Send replies settings successfully set"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Access denied when trying to set replies settings"
          },
          "404": {
            "description": "Post/Comment not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/unsave": {
      "post": {
        "summary": "Unsave a Post or comment (This removes the thing from the user's saved listings)",
        "tags": ["Post-comment actions"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "id of a thing"
                  },
                  "type": {
                    "type": "string",
                    "enum": ["post", "comment"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Unsaved successfully"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized to unsave this Post/comment"
          },
          "404": {
            "description": "Post/Comment not found"
          },
          "409": {
            "description": "Post/Comment already unsaved"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/vote": {
      "post": {
        "summary": "Vote on a post or comment",
        "tags": ["Post-comment actions"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "id of a thing"
                  },
                  "type": {
                    "type": "string",
                    "enum": ["post", "comment"]
                  },
                  "direction": {
                    "type": "number",
                    "description": "Vote direction.. 1 for upvote and -1 for downvote"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vote registered successfully"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User not allowed to vote"
          },
          "404": {
            "description": "Thing not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/follow-post": {
      "post": {
        "summary": "Follow or unfollow a post.",
        "tags": ["Posts"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "follow": {
                    "type": "boolean",
                    "description": "True to follow or False to unfollow"
                  },
                  "id": {
                    "type": "string",
                    "description": "id of a post"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Followed/Unfollowed post successfully"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized to follow/unfollow this post"
          },
          "404": {
            "description": "Post not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/hide": {
      "post": {
        "summary": "Hide a post (This removes it from the user's default view of subreddit listings)",
        "tags": ["Posts"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "id of a post"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Post hidden successfully"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized to hide this post"
          },
          "404": {
            "description": "Post not found"
          },
          "409": {
            "description": "Post already hidden"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/mark-nsfw": {
      "post": {
        "summary": "Mark a post NSFW (Not Safe For Work)",
        "tags": ["Posts"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "id of a post"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Post marked NSFW successfully"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized to mark post as NSFW"
          },
          "404": {
            "description": "Post not found"
          },
          "409": {
            "description": "Post already marked NSFW"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/set-suggested-sort": {
      "post": {
        "summary": "Set suggested sort for a post comments",
        "tags": ["Posts"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "id of a post"
                  },
                  "sort": {
                    "type": "string",
                    "description": "one of (top, new, random, best, hot)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Suggested sort successfully set"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized to set suggested sort of this post"
          },
          "404": {
            "description": "Post not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/clear-suggested-sort": {
      "post": {
        "summary": "Reset the suggested sort for a post back to default",
        "tags": ["Posts"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "id of a post"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Suggested sort successfully cleared"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized to clear suggested sort of this post"
          },
          "404": {
            "description": "Post not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/mark-spoiler": {
      "post": {
        "summary": "Blur the content of the post and unblur when opening it",
        "tags": ["Posts"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "id of a post"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Spoiler set successfully"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized to set post spoiler"
          },
          "404": {
            "description": "Post not found"
          },
          "409": {
            "description": "Post content already blurred"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/submit": {
      "post": {
        "summary": "Submit or share a post to a subreddit",
        "tags": ["Posts"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostSubmission"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Post submitted successfully"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User not allowed to post in this subreddit"
          },
          "404": {
            "description": "Subreddit not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/unhide": {
      "post": {
        "summary": "Unhide a post",
        "tags": ["Posts"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "id of a post"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Post unhidden successfully"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized to unhide this post"
          },
          "404": {
            "description": "Post not found"
          },
          "409": {
            "description": "Post already visible"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/unmark-nsfw": {
      "post": {
        "summary": "Remove the NSFW marking from a post",
        "tags": ["Posts"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "id of a post"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "NSFW unmarked successfully"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized to remove nsfw marking"
          },
          "404": {
            "description": "Post not found"
          },
          "409": {
            "description": "NSFW mark already removed"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/unmark-spoiler": {
      "post": {
        "summary": "Remove ability to blur the content of the post",
        "tags": ["Posts"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "id of a post"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Post spoiler turned off successfully"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User unauthorized to turn off spoiler"
          },
          "404": {
            "description": "Post not found"
          },
          "409": {
            "description": "Post spoiler already turned off"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/post-insights": {
      "get": {
        "summary": "Get the number of views on a post",
        "tags": ["Posts"],
        "parameters": [
          {
            "in": "query",
            "required": true,
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "id of the post"
          }
        ],
        "responses": {
          "200": {
            "description": "Post insights returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalViews": {
                      "type": "number",
                      "description": "The number of people who viewed this post"
                    },
                    "upvoteRate": {
                      "type": "number",
                      "description": "Ratio between the number of upvotes and downvotes"
                    },
                    "communityKarma": {
                      "type": "number",
                      "description": "Total amount of karma earned in this community"
                    },
                    "totalShares": {
                      "type": "number",
                      "description": "How many times the post was shared"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to view this post's insights"
          },
          "404": {
            "description": "Post not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/post-details": {
      "get": {
        "summary": "Get details about a specific post",
        "tags": ["Posts"],
        "parameters": [
          {
            "in": "query",
            "required": true,
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "id of the post"
          }
        ],
        "responses": {
          "200": {
            "description": "Post info returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostDetails"
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to view info of this post"
          },
          "404": {
            "description": "Post not found"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/pin-post": {
      "post": {
        "summary": "Add a post to the user's collection of pinned posts",
        "tags": ["Posts"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "id of a post"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Post pinned successfully"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access"
          },
          "404": {
            "description": "Post not found"
          },
          "409": {
            "description": "Post already pinned"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/pinned-posts": {
      "get": {
        "summary": "Returns all posts pinned by the user",
        "tags": ["Posts"],
        "responses": {
          "200": {
            "description": "Pinned posts returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Pinned_posts": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Post"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access"
          },
          "404": {
            "description": "Posts not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/edit-post-flair": {
      "put": {
        "summary": "Change the flair on a post",
        "tags": ["Posts"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "id of the post being edited"
                  },
                  "flairId": {
                    "type": "string",
                    "description": "id of the new flair selected"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Post flair edited successfully"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to edit this post"
          },
          "404": {
            "description": "Post not found"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/search?type=post": {
      "get": {
        "summary": "General search in the posts tab",
        "tags": ["Search"],
        "parameters": [
          {
            "in": "query",
            "required": true,
            "name": "q",
            "description": "Search query entered",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The maximum number of items desired (Maximum 100)",
            "schema": {
              "type": "number",
              "default": 25
            }
          },
          {
            "in": "query",
            "name": "type",
            "description": "Thing being searched for",
            "schema": {
              "type": "string",
              "default": "post",
              "enum": ["subreddit", "user", "comment", "post"]
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Type of sort applied on the results",
            "schema": {
              "type": "string",
              "default": "new",
              "enum": ["hot", "top", "new", "best", "most comments", "trending"]
            }
          },
          {
            "in": "query",
            "name": "category",
            "description": "Search in a specific category",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "restrictedSubreddits",
            "description": "Search in restricted subreddits only",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "time",
            "description": "Search within a time frame",
            "schema": {
              "type": "string",
              "default": "all",
              "enum": ["hour", "day", "week", "month", "year", "all"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search results returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "string",
                      "description": "The id of the listing that follows before this page. Null if there is no previous page."
                    },
                    "after": {
                      "type": "string",
                      "description": "The id of the listing that follows after this page. Null if there is no next page."
                    },
                    "children": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Post"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No Results found"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/search?type=comment": {
      "get": {
        "summary": "General search in the comments tab",
        "tags": ["Search"],
        "parameters": [
          {
            "in": "query",
            "required": true,
            "name": "q",
            "description": "Search query entered",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The maximum number of items desired (Maximum 100)",
            "schema": {
              "type": "number",
              "default": 25
            }
          },
          {
            "in": "query",
            "name": "type",
            "description": "Thing being searched for",
            "schema": {
              "type": "string",
              "default": "post",
              "enum": ["subreddit", "user", "comment", "post"]
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Type of sort applied on the results",
            "schema": {
              "type": "string",
              "default": "new",
              "enum": ["hot", "top", "new", "best", "most comments", "trending"]
            }
          },
          {
            "in": "query",
            "name": "category",
            "description": "Search in a specific category",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "restrictedSubreddits",
            "description": "Search in restricted subreddits only",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "time",
            "description": "Search within a time frame",
            "schema": {
              "type": "string",
              "default": "all",
              "enum": ["hour", "day", "week", "month", "year", "all"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search results returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "string",
                      "description": "The id of the listing that follows before this page. Null if there is no previous page."
                    },
                    "after": {
                      "type": "string",
                      "description": "The id of the listing that follows after this page. Null if there is no next page."
                    },
                    "children": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "post": {
                            "$ref": "#/components/schemas/Post"
                          },
                          "comment": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "Comment ID"
                              },
                              "text": {
                                "type": "string",
                                "description": "Comment content (text)"
                              },
                              "parentId": {
                                "type": "string",
                                "description": "id of the post being replied to (parent)"
                              },
                              "level": {
                                "type": "number",
                                "description": "Level of the comment (How deep is it in the comment tree)"
                              },
                              "username": {
                                "type": "string",
                                "description": "Name of the author of the comment"
                              },
                              "createdAt": {
                                "type": "string",
                                "format": "time",
                                "description": "How long ago the comment was written"
                              },
                              "upvotes": {
                                "type": "number",
                                "description": "Total number of upvotes on the comment"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No Results found"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/search?type=subreddit": {
      "get": {
        "summary": "General search for a subreddit",
        "tags": ["Search"],
        "parameters": [
          {
            "in": "query",
            "required": true,
            "name": "q",
            "description": "Search query entered",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The maximum number of items desired (Maximum 100)",
            "schema": {
              "type": "number",
              "default": 25
            }
          },
          {
            "in": "query",
            "name": "type",
            "description": "Thing being searched for",
            "schema": {
              "type": "string",
              "default": "post",
              "enum": ["subreddit", "user", "comment", "post"]
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Type of sort applied on the results",
            "schema": {
              "type": "string",
              "default": "new",
              "enum": ["hot", "top", "new", "best", "most comments", "trending"]
            }
          },
          {
            "in": "query",
            "name": "category",
            "description": "Search in a specific category",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "restrictedSubreddits",
            "description": "Search in restricted subreddits only",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "time",
            "description": "Search within a time frame",
            "schema": {
              "type": "string",
              "default": "all",
              "enum": ["hour", "day", "week", "month", "year", "all"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search results returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "string",
                      "description": "The id of the listing that follows before this page. Null if there is no previous page."
                    },
                    "after": {
                      "type": "string",
                      "description": "The id of the listing that follows after this page. Null if there is no next page."
                    },
                    "children": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "subredditName": {
                            "type": "string",
                            "description": "Name of the subreddit"
                          },
                          "numberOfMembers": {
                            "type": "number",
                            "description": "Total number of members in the subreddit"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No Results found"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/search?type=user": {
      "get": {
        "summary": "General search for a user",
        "tags": ["Search"],
        "parameters": [
          {
            "in": "query",
            "required": true,
            "name": "q",
            "description": "Search query entered",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The maximum number of items desired (Maximum 100)",
            "schema": {
              "type": "number",
              "default": 25
            }
          },
          {
            "in": "query",
            "name": "type",
            "description": "Thing being searched for",
            "schema": {
              "type": "string",
              "default": "post",
              "enum": ["subreddit", "user", "comment", "post"]
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Type of sort applied on the results",
            "schema": {
              "type": "string",
              "default": "new",
              "enum": ["hot", "top", "new", "best", "most comments", "trending"]
            }
          },
          {
            "in": "query",
            "name": "category",
            "description": "Search in a specific category",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "restrictedSubreddits",
            "description": "Search in restricted subreddits only",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "time",
            "description": "Search within a time frame",
            "schema": {
              "type": "string",
              "default": "all",
              "enum": ["hour", "day", "week", "month", "year", "all"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search results returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "string",
                      "description": "The id of the listing that follows before this page. Null if there is no previous page."
                    },
                    "after": {
                      "type": "string",
                      "description": "The id of the listing that follows after this page. Null if there is no next page."
                    },
                    "children": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "username": {
                            "type": "string",
                            "description": "Username to be displayed"
                          },
                          "karma": {
                            "type": "number",
                            "description": "Karma of this account"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No Results found"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/r/{subreddit}/search?type=post": {
      "get": {
        "summary": "Search in a specific subreddit for posts",
        "tags": ["Search"],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "subreddit",
            "description": "Subreddit name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "required": true,
            "name": "q",
            "description": "Search query entered",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The maximum number of items desired (Maximum 100)",
            "schema": {
              "type": "number",
              "default": 25
            }
          },
          {
            "in": "query",
            "name": "type",
            "description": "Thing being searched for",
            "schema": {
              "type": "string",
              "default": "post",
              "enum": ["post", "comment"]
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Type of sort applied on the results",
            "schema": {
              "type": "string",
              "default": "new",
              "enum": ["hot", "top", "new", "best", "most comments", "trending"]
            }
          },
          {
            "in": "query",
            "name": "category",
            "description": "Search in a specific category",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "restrictedSubreddits",
            "description": "Search in restricted subreddits only",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "time",
            "description": "Search within a time frame",
            "schema": {
              "type": "string",
              "default": "all",
              "enum": ["hour", "day", "week", "month", "year", "all"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search results returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "string",
                      "description": "The id of the listing that follows before this page. Null if there is no previous page."
                    },
                    "after": {
                      "type": "string",
                      "description": "The id of the listing that follows after this page. Null if there is no next page."
                    },
                    "children": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Post"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No Results found"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/r/{subreddit}/search?type=comment": {
      "get": {
        "summary": "Search in a specific subreddit for comments",
        "tags": ["Search"],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "subreddit",
            "description": "Subreddit name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "required": true,
            "name": "q",
            "description": "Search query entered",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The maximum number of items desired (Maximum 100)",
            "schema": {
              "type": "number",
              "default": 25
            }
          },
          {
            "in": "query",
            "name": "type",
            "description": "Thing being searched for",
            "schema": {
              "type": "string",
              "default": "post",
              "enum": ["post", "comment"]
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Type of sort applied on the results",
            "schema": {
              "type": "string",
              "default": "new",
              "enum": ["hot", "top", "new", "best", "most comments", "trending"]
            }
          },
          {
            "in": "query",
            "name": "category",
            "description": "Search in a specific category",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "restrictedSubreddits",
            "description": "Search in restricted subreddits only",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "time",
            "description": "Search within a time frame",
            "schema": {
              "type": "string",
              "default": "all",
              "enum": ["hour", "day", "week", "month", "year", "all"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search results returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "string",
                      "description": "The id of the listing that follows before this page. Null if there is no previous page."
                    },
                    "after": {
                      "type": "string",
                      "description": "The id of the listing that follows after this page. Null if there is no next page."
                    },
                    "children": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "post": {
                            "$ref": "#/components/schemas/Post"
                          },
                          "comment": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "Comment ID"
                              },
                              "text": {
                                "type": "string",
                                "description": "Comment content (text)"
                              },
                              "parentId": {
                                "type": "string",
                                "description": "id of the post being replied to (parent)"
                              },
                              "level": {
                                "type": "number",
                                "description": "Level of the comment (How deep is it in the comment tree)"
                              },
                              "username": {
                                "type": "string",
                                "description": "Name of the author of the comment"
                              },
                              "createdAt": {
                                "type": "string",
                                "format": "time",
                                "description": "How long ago the comment was written"
                              },
                              "upvotes": {
                                "type": "number",
                                "description": "Total number of upvotes on the comment"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why this happened.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No Results found"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/create-subreddit": {
      "post": {
        "summary": "Create a new subreddit",
        "tags": ["Subreddit"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": ["subredditName", "type", "nsfw", "category"],
                "properties": {
                  "subredditName": {
                    "type": "string",
                    "description": "Subreddit name"
                  },
                  "type": {
                    "type": "string",
                    "description": "Subreddit type",
                    "enum": ["Public", "Restricted", "Private"]
                  },
                  "nsfw": {
                    "type": "boolean",
                    "description": "If true, this subreddit will be NSFW"
                  },
                  "category": {
                    "type": "string",
                    "description": "The category of that subreddit"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The subreddit has been successfully created"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why the request was invalid",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Access Denied"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/subreddit-name-available": {
      "get": {
        "summary": "Check if the username is used before",
        "tags": ["Subreddit"],
        "parameters": [
          {
            "in": "query",
            "required": true,
            "name": "subredditName",
            "description": "Subreddit's name to check",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The subreddit's name is available"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why the request was invalid",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Subreddit's name is already taken"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },

    "/block-user": {
      "post": {
        "summary": "Block or unblock a user",
        "tags": ["User"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": ["block", "username"],
                "properties": {
                  "block": {
                    "type": "boolean",
                    "description": "True to block the user, false to unblock the user"
                  },
                  "username": {
                    "type": "string",
                    "description": "Username of the user to block"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User blocked or unblocked successfully"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why the request was invalid",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Didn't find a user with that username"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/follow-user": {
      "post": {
        "summary": "Follow or unfollow a user",
        "tags": ["User"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": ["follow", "username"],
                "properties": {
                  "follow": {
                    "type": "boolean",
                    "description": "True to follow the user, false to unfollow the user"
                  },
                  "username": {
                    "type": "string",
                    "description": "Username of the user to follow"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User followed or unfollowed successfully"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why the request was invalid",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Didn't find a user with that username"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/{username}/about": {
      "get": {
        "summary": "Return information about the user",
        "tags": ["User"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The username of the user to get"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "displayName": {
                      "type": "string",
                      "description": "The display name of the user"
                    },
                    "about": {
                      "type": "string",
                      "description": "The brief description of the user"
                    },
                    "banner": {
                      "type": "string",
                      "description": "Path of the banner of the user"
                    },
                    "picture": {
                      "type": "string",
                      "description": "Path of profile picture of the user"
                    },
                    "karma": {
                      "type": "integer",
                      "description": "Number of karma for that user"
                    },
                    "cakeDate": {
                      "type": "string",
                      "format": "date",
                      "description": "Yearly anniversary of when the user signed up"
                    },
                    "socialLinks": {
                      "type": "array",
                      "description": "Social links of the user",
                      "items": {
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "Type of the link [facebook, youtube, ...etc]"
                          },
                          "displayText": {
                            "type": "string",
                            "description": "Display text for the link"
                          },
                          "link": {
                            "type": "string",
                            "description": "The link"
                          }
                        }
                      }
                    },
                    "nsfw": {
                      "type": "boolean",
                      "description": "If true, then this profile is NSFW"
                    },
                    "followed": {
                      "type": "boolean",
                      "description": "If true, then that user is followed by the logged in user"
                    },
                    "blocked": {
                      "type": "boolean",
                      "description": "If true, then that user is blocked by the logged in user"
                    },
                    "moderatorOf": {
                      "type": "array",
                      "description": "List of subreddits in which this user is moderator",
                      "items": {
                        "properties": {
                          "subredditName": {
                            "type": "string",
                            "description": "Name of the subreddit"
                          },
                          "numOfMembers": {
                            "type": "integer",
                            "description": "Number of members for that subreddit"
                          },
                          "nsfw": {
                            "type": "boolean",
                            "description": "If true, this subreddit will be marked as NSFW"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Didn't find a user with that username"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/user/{username}/overview": {
      "get": {
        "summary": "Return a list of user's activity [posts, comments]",
        "tags": ["User"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "description": "The username of the user to get",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "sort",
            "description": "The sorting algorithm used",
            "schema": {
              "type": "string",
              "default": "new",
              "enum": ["new", "hot", "top"]
            }
          },
          {
            "in": "query",
            "name": "time",
            "description": "The time interval for the results (used with top only)",
            "schema": {
              "type": "string",
              "default": "all",
              "enum": ["hour", "day", "week", "month", "year", "all"]
            }
          },
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items desired [Maximum = 100]",
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOverview"
                }
              }
            }
          },
          "404": {
            "description": "Didn't find a user with that username"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/user/{username}/posts": {
      "get": {
        "summary": "Return a list of user's posts",
        "tags": ["User"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "description": "The username of the user to get",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "sort",
            "description": "The sorting algorithm used",
            "schema": {
              "type": "string",
              "default": "new",
              "enum": ["new", "hot", "top"]
            }
          },
          {
            "in": "query",
            "name": "time",
            "description": "The time interval for the results (used with top only)",
            "schema": {
              "type": "string",
              "default": "all",
              "enum": ["hour", "day", "week", "month", "year", "all"]
            }
          },
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items desired [Maximum = 100]",
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListedPost"
                }
              }
            }
          },
          "404": {
            "description": "Didn't find a user with that username"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/user/{username}/history": {
      "get": {
        "summary": "Return a list of user's history (recent clicked posts)",
        "tags": ["User"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "description": "The username of the user to get",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items desired [Maximum = 100]",
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListedPost"
                }
              }
            }
          },
          "404": {
            "description": "Didn't find a user with that username"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/user/{username}/comments": {
      "get": {
        "summary": "Return a list of user's comments",
        "tags": ["User"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "description": "The username of the user to get",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "sort",
            "description": "The sorting algorithm used",
            "schema": {
              "type": "string",
              "default": "new",
              "enum": ["new", "hot", "top"]
            }
          },
          {
            "in": "query",
            "name": "time",
            "description": "The time interval for the results (used with top only)",
            "schema": {
              "type": "string",
              "default": "all",
              "enum": ["hour", "day", "week", "month", "year", "all"]
            }
          },
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items desired [Maximum = 100]",
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "string",
                      "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things."
                    },
                    "after": {
                      "type": "string",
                      "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things."
                    },
                    "children": {
                      "type": "array",
                      "description": "List of comments to return",
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Id of the post containing the comment"
                          },
                          "data": {
                            "type": "object",
                            "properties": {
                              "subreddit": {
                                "type": "string",
                                "description": "Name of subreddit which contain the comment"
                              },
                              "postedBy": {
                                "type": "string",
                                "description": "The username for the publisher of the post"
                              },
                              "title": {
                                "type": "string",
                                "description": "Title of the post"
                              },
                              "type": {
                                "type": "string",
                                "description": "Type of content of the post",
                                "enum": ["text", "video", "image", "link"]
                              },
                              "content": {
                                "type": "string",
                                "description": "Content of the post [text, path of the video, path of the image, link]"
                              },
                              "flair": {
                                "type": "object",
                                "properties": {
                                  "flairId": {
                                    "type": "string",
                                    "description": "The id of the flair"
                                  },
                                  "flairText": {
                                    "type": "string",
                                    "description": "Flair text"
                                  },
                                  "backgroundColor": {
                                    "type": "string",
                                    "description": "Background color of the flair"
                                  },
                                  "textColor": {
                                    "type": "string",
                                    "description": "Color of the flair text"
                                  }
                                }
                              },
                              "nsfw": {
                                "type": "boolean",
                                "description": "If true, then this post is NSFW"
                              },
                              "spoiler": {
                                "type": "boolean",
                                "description": "If true, then this post is marked as spoiler"
                              },
                              "comment": {
                                "type": "array",
                                "description": "Comments writen by the current user",
                                "items": {
                                  "properties": {
                                    "commentId": {
                                      "type": "string",
                                      "description": "The id of the comment"
                                    },
                                    "commentBy": {
                                      "type": "string",
                                      "description": "The username of the comment owner"
                                    },
                                    "commentBody": {
                                      "type": "string",
                                      "description": "The comment itself"
                                    },
                                    "points": {
                                      "type": "integer",
                                      "description": "The points to that comment [up votes - down votes]"
                                    },
                                    "editTime": {
                                      "type": "string",
                                      "format": "date-time",
                                      "description": "Edit time for the comment (if exists)"
                                    },
                                    "publishTime": {
                                      "type": "string",
                                      "format": "date-time",
                                      "description": "Publish time for the comment"
                                    },
                                    "level": {
                                      "type": "integer",
                                      "description": "The level of the comment [level of nesting]"
                                    },
                                    "inYourSubreddit": {
                                      "type": "boolean",
                                      "description": "If true, then you can approve, remove, or spam that comment"
                                    },
                                    "moderation": {
                                      "type": "object",
                                      "description": "Moderate the comment if you are a moderator in that subreddit",
                                      "properties": {
                                        "approve": {
                                          "type": "object",
                                          "description": "Approve the comment",
                                          "properties": {
                                            "approvedBy": {
                                              "type": "string",
                                              "description": "Username for the moderator who approved that comment"
                                            },
                                            "approvedDate": {
                                              "type": "string",
                                              "format": "date-time",
                                              "description": "Date when that comment approved"
                                            }
                                          }
                                        },
                                        "remove": {
                                          "type": "object",
                                          "description": "Remove the comment",
                                          "properties": {
                                            "removedBy": {
                                              "type": "string",
                                              "description": "Username for the moderator who removed that comment"
                                            },
                                            "removedDate": {
                                              "type": "string",
                                              "format": "date-time",
                                              "description": "Date when that comment removed"
                                            }
                                          }
                                        },
                                        "spam": {
                                          "type": "object",
                                          "description": "Spam the comment",
                                          "properties": {
                                            "spamedBy": {
                                              "type": "string",
                                              "description": "Username for the moderator who spamed that comment"
                                            },
                                            "spamedDate": {
                                              "type": "string",
                                              "format": "date-time",
                                              "description": "Date when that comment spamed"
                                            }
                                          }
                                        },
                                        "lock": {
                                          "type": "boolean",
                                          "description": "If true, then comments are locked in this post"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Didn't find a user with that username"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/user/{username}/upvoted": {
      "get": {
        "summary": "Return a list of user's upvoted posts",
        "tags": ["User"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "description": "The username of the user to get",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "sort",
            "description": "The sorting algorithm used",
            "schema": {
              "type": "string",
              "default": "new",
              "enum": ["new", "hot", "top"]
            }
          },
          {
            "in": "query",
            "name": "time",
            "description": "The time interval for the results (used with top only)",
            "schema": {
              "type": "string",
              "default": "all",
              "enum": ["hour", "day", "week", "month", "year", "all"]
            }
          },
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items desired [Maximum = 100]",
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListedPost"
                }
              }
            }
          },
          "404": {
            "description": "Didn't find a user with that username"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/{username}/downvoted": {
      "get": {
        "summary": "Return a list of user's downvoted posts",
        "tags": ["User"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "description": "The username of the user to get",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "sort",
            "description": "The sorting algorithm used",
            "schema": {
              "type": "string",
              "default": "new",
              "enum": ["new", "hot", "top"]
            }
          },
          {
            "in": "query",
            "name": "time",
            "description": "The time interval for the results (used with top only)",
            "schema": {
              "type": "string",
              "default": "all",
              "enum": ["hour", "day", "week", "month", "year", "all"]
            }
          },
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items desired [Maximum = 100]",
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListedPost"
                }
              }
            }
          },
          "404": {
            "description": "Didn't find a user with that username"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/{username}/saved": {
      "get": {
        "summary": "Return a list of user's saved [posts, comments]",
        "tags": ["User"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "description": "The username of the user to get",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items desired [Maximum = 100]",
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOverview"
                }
              }
            }
          },
          "404": {
            "description": "Didn't find a user with that username"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/{username}/hidden": {
      "get": {
        "summary": "Return a list of user's hidden posts",
        "tags": ["User"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "description": "The username of the user to get",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items desired [Maximum = 100]",
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListedPost"
                }
              }
            }
          },
          "404": {
            "description": "Didn't find a user with that username"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/account-settings": {
      "get": {
        "summary": "Return the preference settings of the logged in user",
        "tags": ["User settings"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "Email of the user"
                    },
                    "country": {
                      "type": "string",
                      "description": "Country of the user"
                    },
                    "gender": {
                      "type": "string",
                      "description": "Gender of the user"
                    },
                    "displayName": {
                      "type": "string",
                      "description": "The display name"
                    },
                    "about": {
                      "type": "string",
                      "description": "The brief description of the user"
                    },
                    "socialLinks": {
                      "type": "array",
                      "description": "Social links of the user",
                      "items": {
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "Type of the link [facebook, youtube, ...etc]"
                          },
                          "displayText": {
                            "type": "string",
                            "description": "Display text for the link"
                          },
                          "link": {
                            "type": "string",
                            "description": "The link"
                          }
                        }
                      }
                    },
                    "havePassword": {
                      "type": "boolean",
                      "description": "User to know if the user have a password or not"
                    },
                    "hasVerifiedEmail": {
                      "type": "boolean",
                      "description": "Used to know if the user logged in verified his email or not"
                    },
                    "nsfw": {
                      "type": "boolean",
                      "description": "This content is NSFW or not"
                    },
                    "allowToFollowYou": {
                      "type": "boolean",
                      "description": "If true, Other users can follow you"
                    },
                    "adultContent": {
                      "type": "boolean",
                      "description": "If true, View adult and NSFW (not safe for work) content in your feed and search results"
                    },
                    "autoplayMedia": {
                      "type": "boolean",
                      "description": "If true, Play videos and gifs automatically when in the viewport"
                    },
                    "newFollowerEmail": {
                      "type": "boolean",
                      "description": "If true, Send an email when a user follows you"
                    },
                    "unsubscribeFromEmails": {
                      "type": "boolean",
                      "description": "If true, Don't send any emails"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Access Denied"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "patch": {
        "summary": "Change the settings of the logged in user [can send any of the properties]",
        "tags": ["User settings"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "country": {
                    "type": "string",
                    "description": "The new country"
                  },
                  "gender": {
                    "type": "string",
                    "description": "The new gender"
                  },
                  "displayName": {
                    "type": "string",
                    "description": "The new display name"
                  },
                  "about": {
                    "type": "string",
                    "description": "The brief description of the user"
                  },
                  "havePassword": {
                    "type": "boolean",
                    "description": "User to know if the user have a password or not"
                  },
                  "nsfw": {
                    "type": "boolean",
                    "description": "This content is NSFW or not"
                  },
                  "allowToFollowYou": {
                    "type": "boolean",
                    "description": "If true, Other users can follow you"
                  },
                  "adultContent": {
                    "type": "boolean",
                    "description": "If true, View adult and NSFW (not safe for work) content in your feed and search results"
                  },
                  "autoplayMedia": {
                    "type": "boolean",
                    "description": "If true, Play videos and gifs automatically when in the viewport"
                  },
                  "newFollowerEmail": {
                    "type": "boolean",
                    "description": "If true, Send an email when a user follows you"
                  },
                  "unsubscribeFromEmails": {
                    "type": "boolean",
                    "description": "If true, Don't send any emails"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account settings changed successfully"
          },
          "401": {
            "description": "Access Denied"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/connect/{type}": {
      "post": {
        "summary": "Connect the account with google or facebook for fast login",
        "tags": ["User settings"],
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "description": "Type of connect",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["google", "facebook"]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": ["accessToken"],
                "properties": {
                  "accessToken": {
                    "type": "string",
                    "description": "Access token from the response of google or facebook"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Connected successfully"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why the request was invalid",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Access Denied"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/change-email": {
      "put": {
        "summary": "Change the email of the logged in user",
        "tags": ["User settings"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": ["currentPassword", "newEmail"],
                "properties": {
                  "currentPassword": {
                    "type": "string",
                    "description": "The current password"
                  },
                  "newEmail": {
                    "type": "string",
                    "description": "The new email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email has been changed successfully"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why the request was invalid",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Access Denied"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/change-password": {
      "put": {
        "summary": "Change the password of the logged in user",
        "tags": ["User settings"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "currentPassword",
                  "newPassword",
                  "confirmNewPassword"
                ],
                "properties": {
                  "currentPassword": {
                    "type": "string",
                    "description": "The current password"
                  },
                  "newPassword": {
                    "type": "string",
                    "description": "The new password"
                  },
                  "confirmNewPassword": {
                    "type": "string",
                    "description": "Confirm the new password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password has been changed successfully"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why the request was invalid",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Access Denied"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/delete-account": {
      "delete": {
        "summary": "Delete the account",
        "tags": ["User settings"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": ["username", "password"],
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Username for that user"
                  },
                  "password": {
                    "type": "string",
                    "description": "The password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Account deleted successfully"
          },
          "401": {
            "description": "Access Denied"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/social-link": {
      "post": {
        "summary": "Add a social link to the logged in user",
        "tags": ["User settings"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": ["type", "displayText", "link"],
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Type of the link [facebook, youtube, ...etc]"
                  },
                  "displayText": {
                    "type": "string",
                    "description": "Display text for the link"
                  },
                  "link": {
                    "type": "string",
                    "description": "The link"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Link has been added successfully"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why the request was invalid",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Access Denied"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete the social link",
        "tags": ["User settings"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": ["type", "displayText", "link"],
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Type of the link [facebook, youtube, ...etc]"
                  },
                  "displayText": {
                    "type": "string",
                    "description": "Display text for the link"
                  },
                  "link": {
                    "type": "string",
                    "description": "The link"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Link deleted successfully"
          },
          "401": {
            "description": "Access Denied"
          },
          "404": {
            "description": "Link doesn't exist"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/profile-picture": {
      "post": {
        "summary": "Add a profile picture to the logged in user",
        "tags": ["User settings"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": ["picture"],
                "properties": {
                  "picture": {
                    "type": "string",
                    "description": "Path of the profile picture"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile picture has been added successfully"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why the request was invalid",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Access Denied"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete the profile picture",
        "tags": ["User settings"],
        "responses": {
          "204": {
            "description": "Profile picture deleted successfully"
          },
          "401": {
            "description": "Access Denied"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/banner-image": {
      "post": {
        "summary": "Add a banner to the logged in user",
        "tags": ["User settings"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": ["banner"],
                "properties": {
                  "banner": {
                    "type": "string",
                    "description": "Path of the banner image"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Banner image has been added successfully"
          },
          "400": {
            "description": "The request was invalid. You may refer to response for details around why the request was invalid",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Type of error"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Access Denied"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete the banner image",
        "tags": ["User settings"],
        "responses": {
          "204": {
            "description": "Banner image deleted successfully"
          },
          "401": {
            "description": "Access Denied"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/blocked-users": {
      "get": {
        "summary": "Get a list of blocked users by the logged in user",
        "tags": ["User settings"],
        "parameters": [
          {
            "in": "query",
            "name": "before",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "after",
            "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of items desired [Maximum = 100]",
            "schema": {
              "type": "integer",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "string",
                      "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the previous things."
                    },
                    "after": {
                      "type": "string",
                      "description": "Only one of after/before should be specified. The id of last item in the listing to use as the anchor point of the slice and get the next things."
                    },
                    "children": {
                      "type": "array",
                      "description": "List of users to return",
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Id of the users"
                          },
                          "data": {
                            "type": "object",
                            "properties": {
                              "username": {
                                "type": "string",
                                "description": "Username of the blocked user"
                              },
                              "blockDate": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The date on which this user has been blocked"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Access Denied"
          },
          "404": {
            "description": "No blocked users found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "definitions": {},
  "responses": {},
  "parameters": {},
  "securityDefinitions": {},
  "tags": [
    {
      "name": "Sign Up",
      "description": "Sign Up and email verfication endpoints"
    },
    {
      "name": "Login",
      "description": "Login and forget password endpoints used"
    },
    {
      "name": "Listing",
      "description": "Listing endpoints"
    },
    {
      "name": "Messages",
      "description": "Private messages"
    },
    {
      "name": "Posts and comments moderation",
      "description": "Posts and comments moderation endpoints"
    },
    {
      "name": "General moderation",
      "description": "General moderation endpoints"
    },
    {
      "name": "Subreddit moderation",
      "description": "Subreddit Moderation endpoints"
    },
    {
      "name": "Notifications",
      "description": "Notifications that sent to each user about an occurred event"
    },
    {
      "name": "Threads",
      "description": "Containers that help us to send notifications"
    },
    {
      "name": "Subreddit",
      "description": "Subreddit endpoints"
    },
    {
      "name": "Posts",
      "description": "Only post-related actions"
    },
    {
      "name": "Categories",
      "description": "All the different categories for communities"
    },
    {
      "name": "Comments",
      "description": "Comments and replies on a post"
    },
    {
      "name": "Post-comment actions",
      "description": "User actions that are allowed on a comment or a post"
    },
    {
      "name": "Post-comment-message actions",
      "description": "User actions that are allowed on a comment, post or message"
    },
    {
      "name": "Search",
      "description": "Search for anything in any place"
    },
    {
      "name": "User",
      "description": "User's profile endpoints (overview, history, ...etc)"
    },
    {
      "name": "User settings",
      "description": "User settings endpoints"
    }
  ]
}
